{
    "docs": [
        {
            "location": "/", 
            "text": "XenApp and XenDesktop SDK\n\n\n\n\nXenApp and XenDesktop provide an SDK based on a number of Microsoft\nWindows PowerShell version 3.0 snap-ins that allows you to perform the\nsame tasks as you would with the Citrix Studio console, together with\ntasks you cannot do with Studio alone.\n\n\nAs from version 7.5,XenApp and XenDesktop share a unified architecture and management: the\nFlexCast Management Architecture. This means that XenApp provides many\nfeatures previously only available in XenDesktop; elements of the SDK\nthat relate to common features therefore apply equally to both XenApp\nand XenDesktop, even though the commands themselves refer only to\nXenDesktop.\n\n\nKey differences between the XenDesktop 5 and XenDesktop 7 SDK\n\n\n\n\n\n\nNew high-level SDK\n\u00a0\u2014 XenDesktop 7 provides a new high-level SDK\n    that enables you to script and automate site creation and\n    maintenance quickly and easily. The high-level SDK insulates you\n    from much of the complexity of the low-level SDKs, such that you can\n    create a new site simply by running two cmdlets.\n\n\n\n\n\n\nNew low-level SDKs\u00a0\n\u2014 Individual low-level SDKs are provided for\n    the new XenDesktop 7 services, including a dedicated and enhanced\n    SDK for the Delegated Administration Service (DAS), which was\n    previously part of the Broker SDK in XenDesktop 5. There are also\n    SDKs for new features including the Monitor Service, Environment\n    Test, and Configuration Logging.\n\n\n\n\n\n\nWindows Server OS Machine catalogs and delivery groups\n\u00a0\u2014 You can\n    use the XenDesktop 7 SDK to deliver cost-effective applications and\n    desktops hosted on server operating systems.\n\n\n\n\n\n\nDesktop OS Machine applications\n\u00a0\u2014 Desktop OS Machine\n    applications have changed significantly at the SDK level. If you\n    have existing scripts for running applications on Desktop OSs, you\n    will have to update these scripts for XenDesktop 7 as there is\n    little backwards compatibility.\n\n\n\n\n\n\nApply settings to machines in Delivery Groups\n\u00a0\u2014 In XenDesktop 7,\n    using configuration slots, you can apply settings to machines in a\n    specific delivery group, rather than to all machines in a site. This\n    enables you to configure, for a given delivery group, which settings\n    apply to that group. A number of pre-defined configuration slots are\n    provided that contain different types of settings, such as settings\n    for StoreFront addresses for use with Receiver or App-V publishing\n    server locations. You can use one collection of settings from a slot\n    to affect only a particular delivery group, and a different\n    collection of settings from the same slot to affect another\n    delivery group. You can use names appropriate to your particular\n    deployment; for example, \"Sales Department policy.\"\n\n\n\n\n\n\nCatalog types replaced\n\u00a0\u2014 In XenDesktop 7, catalog types have\n    been replaced by catalogs with individual properties. However, for\n    backwards compatibility, you can still use existing scripts that\n    employ catalog types, such as single image (pooled) and thin\n    clone (dedicated) etc., but internally these are converted into sets\n    of properties.\n\n\n\n\n\n\n\n\nCaution:\u00a0Backwards compatibility with XenDesktop 5 catalog types has\nbeen maintained where possible and practicable. However, when writing\nnew scripts, do not use catalog types; instead, specify catalogs with\nindividual properties.\n\n\n\n\n\n\nDesktop object replaced\n\u00a0\u2014 In XenDesktop 5, the Desktop object is\n    one of the main types of SDK object used in Broker SDK scripts. The\n    Desktop object describes both the machine and the session on\n    the machine. In XenDesktop 7, this object is replaced by the Session\n    object and the Machine object, both of which have been expanded to\n    do the work of the Desktop object. However, for backwards\n    compatibility, you can still use existing scripts that employ the\n    Desktop object.\n\n\n\n\n\n\nCaution:\u00a0Backwards compatibility with XenDesktop 5 has been\nmaintained where possible and practicable. However, when writing new\nscripts, do not use the Desktop object; instead, specify Session and\nMachine objects.\n\n\n\n\nDifferences in policy rules\n\n\nThere are differences between the SDK and the Studio console in terms of\npolicy rules. Entitlement and assignment policy rules are independent\nentities in the SDK; in the console, these entities are not visible as\nthey are seamlessly merged with the Delivery Group. Also, access policy\nrules are less restrictive in the SDK.\n\n\nUse the SDK\n\n\nThe SDK comprises of a number of PowerShell snap-ins installed\nautomatically by the installation wizard when you install the Controller\nor Studio components.\n\n\nTo access and run the cmdlets:\n\n\n1.Start a shell in PowerShell 3.0.\n\n\n\n\nTo start a shell from the console, click\u00a0\nStudio\n, select the\nPowerShell tab, and click on\u00a0\nLaunch PowerShell\n.\n\n\nYou must run the shell or script using an identity that has Citrix\nadministration rights. Although members of the local administrators\ngroup on the Controller automatically have full administrative\nprivileges to allow XenDesktop to be installed, Citrix recommends that\nfor normal operation, you create Citrix administrators with the\nappropriate rights, rather than use the local administrators account.\nIf you are running Windows Server 2008, you must run the shell or\nscript as a Citrix administrator, and not as a member of the local\nadministrators group.\n\n\n\n\n2.To use SDK cmdlets within scripts, set the execution policy in PowerShell.\n\n\n\n\nFor more information about PowerShell execution policy, see your\nMicrosoft documentation.\n\n\n\n\n3.Add the snap-ins you require into the PowerShell environment using\n    the\u00a0\nAdd -PSSnapin\n\u00a0command in the Windows PowerShell console. V1\n    and V2 denote the version of the snap-in (XenDesktop 5 snap-ins are\n    version 1; XenDesktop 7 snap-ins are version 2.). For example, type:\n\n\n\n\nAdd-PSSnapin Citrix.ADIdentity.Admin.V2\n\n\nTo import all the cmdlets, type:\n\n\nAdd-PSSnapin Citrix.*.Admin.V*\n\n\nAfter importing, you have access to the cmdlets and their associated\nhelp.\n\n\n\n\nFor an example of a typical use case, see\u00a0\nGet started with the\nSDK\n.\n\n\nTip:\n\u00a0For a complete listing of all help text for the cmdlets,\nsee\u00a0\nPowerShell cmdlet\nhelp\n.\n\n\nGroup Policy SDK usage\n\n\nThe Citrix Group Policy SDK allows you to display and configure Group\nPolicy settings and filters. It uses a PowerShell provider to create a\nvirtual drive that corresponds to the machine and user settings and\nfilters. The provider appears as an extension to New-PSDrive. To use the\nGroup Policy SDK, either Studio or the XenApp and XenDesktop SDK must be\ninstalled.\n\n\nAdding the Group Policy SDK\n\n\n1.To add the Group Policy SDK, type:\n\n\nAdd-PSSnapin citrix.common.grouppolicy\n\n\n\n\n\n        \n\n2.To access help, type:\n\n\nhelp New-PSDrive -path localgpo:/\n\n\n\n\n\nUsing the Group Policy SDK\n\n\n1.To create a virtual drive and load it with settings, type:\n\n\nNew-PSDrive \nlt;Standard Parameters\ngt; \\[-PSProvider\\]\nCitrixGroupPolicy *-Controller* \nlt;string\ngt;\n\n\n\n\n\n**New-PSDrive \nlt;Standard Parameters\ngt; \\[-PSProvider\\]\nCitrixGroupPolicy\u00a0***-Controller***\u00a0\nlt;string\ngt;**\n\n\n\n\n\n\n\nwhere\u00a0\n-Controller\n\u00a0is the fully qualified domain name of a controller\nin the site you want to connect to and load settings from.", 
            "title": "Overview"
        }, 
        {
            "location": "/#xenapp-and-xendesktop-sdk", 
            "text": "XenApp and XenDesktop provide an SDK based on a number of Microsoft\nWindows PowerShell version 3.0 snap-ins that allows you to perform the\nsame tasks as you would with the Citrix Studio console, together with\ntasks you cannot do with Studio alone.  As from version 7.5,XenApp and XenDesktop share a unified architecture and management: the\nFlexCast Management Architecture. This means that XenApp provides many\nfeatures previously only available in XenDesktop; elements of the SDK\nthat relate to common features therefore apply equally to both XenApp\nand XenDesktop, even though the commands themselves refer only to\nXenDesktop.", 
            "title": "XenApp and XenDesktop SDK"
        }, 
        {
            "location": "/#key-differences-between-the-xendesktop-5-and-xendesktop-7-sdk", 
            "text": "New high-level SDK \u00a0\u2014 XenDesktop 7 provides a new high-level SDK\n    that enables you to script and automate site creation and\n    maintenance quickly and easily. The high-level SDK insulates you\n    from much of the complexity of the low-level SDKs, such that you can\n    create a new site simply by running two cmdlets.    New low-level SDKs\u00a0 \u2014 Individual low-level SDKs are provided for\n    the new XenDesktop 7 services, including a dedicated and enhanced\n    SDK for the Delegated Administration Service (DAS), which was\n    previously part of the Broker SDK in XenDesktop 5. There are also\n    SDKs for new features including the Monitor Service, Environment\n    Test, and Configuration Logging.    Windows Server OS Machine catalogs and delivery groups \u00a0\u2014 You can\n    use the XenDesktop 7 SDK to deliver cost-effective applications and\n    desktops hosted on server operating systems.    Desktop OS Machine applications \u00a0\u2014 Desktop OS Machine\n    applications have changed significantly at the SDK level. If you\n    have existing scripts for running applications on Desktop OSs, you\n    will have to update these scripts for XenDesktop 7 as there is\n    little backwards compatibility.    Apply settings to machines in Delivery Groups \u00a0\u2014 In XenDesktop 7,\n    using configuration slots, you can apply settings to machines in a\n    specific delivery group, rather than to all machines in a site. This\n    enables you to configure, for a given delivery group, which settings\n    apply to that group. A number of pre-defined configuration slots are\n    provided that contain different types of settings, such as settings\n    for StoreFront addresses for use with Receiver or App-V publishing\n    server locations. You can use one collection of settings from a slot\n    to affect only a particular delivery group, and a different\n    collection of settings from the same slot to affect another\n    delivery group. You can use names appropriate to your particular\n    deployment; for example, \"Sales Department policy.\"    Catalog types replaced \u00a0\u2014 In XenDesktop 7, catalog types have\n    been replaced by catalogs with individual properties. However, for\n    backwards compatibility, you can still use existing scripts that\n    employ catalog types, such as single image (pooled) and thin\n    clone (dedicated) etc., but internally these are converted into sets\n    of properties.     Caution:\u00a0Backwards compatibility with XenDesktop 5 catalog types has\nbeen maintained where possible and practicable. However, when writing\nnew scripts, do not use catalog types; instead, specify catalogs with\nindividual properties.    Desktop object replaced \u00a0\u2014 In XenDesktop 5, the Desktop object is\n    one of the main types of SDK object used in Broker SDK scripts. The\n    Desktop object describes both the machine and the session on\n    the machine. In XenDesktop 7, this object is replaced by the Session\n    object and the Machine object, both of which have been expanded to\n    do the work of the Desktop object. However, for backwards\n    compatibility, you can still use existing scripts that employ the\n    Desktop object.    Caution:\u00a0Backwards compatibility with XenDesktop 5 has been\nmaintained where possible and practicable. However, when writing new\nscripts, do not use the Desktop object; instead, specify Session and\nMachine objects.", 
            "title": "Key differences between the XenDesktop 5 and XenDesktop 7 SDK"
        }, 
        {
            "location": "/#differences-in-policy-rules", 
            "text": "There are differences between the SDK and the Studio console in terms of\npolicy rules. Entitlement and assignment policy rules are independent\nentities in the SDK; in the console, these entities are not visible as\nthey are seamlessly merged with the Delivery Group. Also, access policy\nrules are less restrictive in the SDK.", 
            "title": "Differences in policy rules"
        }, 
        {
            "location": "/#use-the-sdk", 
            "text": "The SDK comprises of a number of PowerShell snap-ins installed\nautomatically by the installation wizard when you install the Controller\nor Studio components.  To access and run the cmdlets:  1.Start a shell in PowerShell 3.0.   To start a shell from the console, click\u00a0 Studio , select the\nPowerShell tab, and click on\u00a0 Launch PowerShell .  You must run the shell or script using an identity that has Citrix\nadministration rights. Although members of the local administrators\ngroup on the Controller automatically have full administrative\nprivileges to allow XenDesktop to be installed, Citrix recommends that\nfor normal operation, you create Citrix administrators with the\nappropriate rights, rather than use the local administrators account.\nIf you are running Windows Server 2008, you must run the shell or\nscript as a Citrix administrator, and not as a member of the local\nadministrators group.   2.To use SDK cmdlets within scripts, set the execution policy in PowerShell.   For more information about PowerShell execution policy, see your\nMicrosoft documentation.   3.Add the snap-ins you require into the PowerShell environment using\n    the\u00a0 Add -PSSnapin \u00a0command in the Windows PowerShell console. V1\n    and V2 denote the version of the snap-in (XenDesktop 5 snap-ins are\n    version 1; XenDesktop 7 snap-ins are version 2.). For example, type:   Add-PSSnapin Citrix.ADIdentity.Admin.V2  To import all the cmdlets, type:  Add-PSSnapin Citrix.*.Admin.V*  After importing, you have access to the cmdlets and their associated\nhelp.   For an example of a typical use case, see\u00a0 Get started with the\nSDK .  Tip: \u00a0For a complete listing of all help text for the cmdlets,\nsee\u00a0 PowerShell cmdlet\nhelp .", 
            "title": "Use the SDK"
        }, 
        {
            "location": "/#group-policy-sdk-usage", 
            "text": "The Citrix Group Policy SDK allows you to display and configure Group\nPolicy settings and filters. It uses a PowerShell provider to create a\nvirtual drive that corresponds to the machine and user settings and\nfilters. The provider appears as an extension to New-PSDrive. To use the\nGroup Policy SDK, either Studio or the XenApp and XenDesktop SDK must be\ninstalled.  Adding the Group Policy SDK  1.To add the Group Policy SDK, type:  Add-PSSnapin citrix.common.grouppolicy           \n2.To access help, type:  help New-PSDrive -path localgpo:/  Using the Group Policy SDK  1.To create a virtual drive and load it with settings, type:  New-PSDrive  lt;Standard Parameters gt; \\[-PSProvider\\]\nCitrixGroupPolicy *-Controller*  lt;string gt;  **New-PSDrive  lt;Standard Parameters gt; \\[-PSProvider\\]\nCitrixGroupPolicy\u00a0***-Controller***\u00a0 lt;string gt;**   where\u00a0 -Controller \u00a0is the fully qualified domain name of a controller\nin the site you want to connect to and load settings from.", 
            "title": "Group Policy SDK usage"
        }, 
        {
            "location": "/understandxd/", 
            "text": "Understanding the XenDesktop Administration Model\n\n\nXenDesktop 7 has an administration model that is defined by a set of objects and their interconnections, as shown in the following illustration.\n\n\n\n\nThe following sections describe each object, its responsibilities, characteristics and basic\nproperties.\n\n\nConnection\n\n\nA Connection entity provides the details required to establish a connection to the administration point for a virtualization platform. These details are used to provide any power management and provisioning functions that are required. The Connection defines:\n\n\n\n\n\n\nThe identity of the connection, which includes a name and an internal ID value (a GUID).\n\n\n\n\n\n\nType\u2014XenServer, SCVMM or vCenter.\n\n\n\n\n\n\nUsername\u2014the account name to use for connections to the hypervisor.\n\n\n\n\n\n\nPassword\u2014the password to use for connections to the hypervisor.\n\n\n\n\n\n\nThe state of the connection and whether the hypervisor can be\n    communicated with or not.\n\n\n\n\n\n\nAny current alerts raised by the hypervisor.\n\n\n\n\n\n\nThe password cannot be read back once set and is stored in the database in an encrypted form.\n\n\nThere is one of these entities in the model for each platform definition; however, there will\nbe many connections established to the virtualization platform at run time to service the requirements of the XenDesktop deployment. These connections can be shared by many Resources entities (see below for further details).\n\n\nNote:\n When setting up a Connection with XenServer, you specify a host or XenServer pool;\nwhen setting up a Connection with Microsoft Hyper-V or VMware, you provide details to the management servers (SCVMM or vCenter). Also, when configuring a Connection, you must specify the user name in the correct format, depending on the virtualization solution you're using. If you're\nsetting up a Connection with XenServer, specify a plain user name; for example \"username\"; for a Connection with VMware or Hyper-V, specify a domain user name; for example \"domain\\username\".\n\n\nResources\n\n\nNote:\n This applies only to the creation of new machines when using Machine Creation Services (MCS) or Provisioning Services (PVS).\n\n\nThis setting defines a set of resources within the virtualization platform that are available for the product to consume. This allows the administrator to constrain deployment to a subset of the resources that the platform provides, and enables differing sets of resources to be defined for different purposes. This can control the storage and networking usage of machines provisioned within the site. The Resources entity defines:\n\n\n\n\n\n\nNetworks\u2014the networks which are able to be used when provisioning new machines into the virtualization plaform (for PVS, this is the streaming network; only one can be chosen or the first one is used).\n\n\n\n\n\n\nStorage\u2014the storage to use when provisioning new machines into the virtualization platform.\n\n\n\n\n\n\nAt least one Resources setting must be defined for each Connection object if a provisioning\nmechanism is to be used. Many Resources settings can be linked to a single Connection.\n\n\nThe connection details are provided by the Connection entity.\n\n\nNote:\n When specifying Resources on a Connection to either SCVMM or vCenter, you select the host or cluster as well as the storage and networking.\n\n\nAdministrator\n\n\nThis defines the person who can administer the product. There can be various administrators of\nthe product, each with a different set of capabilities within the product. The Administrator defines:\n\n\n\n\n\n\nThe AD account the administrator is defined by, defined as their name and SID value.\n    This can be an individual user or a security group.\n\n\n\n\n\n\nThe rights the administrator has (i.e. what roles are available over which scopes).\n\n\n\n\n\n\nMachine\n\n\nA machine is a representation of a virtual or physical computer that can be used within\na site to provide sessions to users. The machine defines:\n\n\n\n\n\n\nIdentity of the machine, such as SAM name, DNS name, host (hypervisor) name, IP address, SID, License ID etc.\n\n\n\n\n\n\nStatus of the machine, including power state, registration state, Personal vDisk state, load index etc. A summary state value aggregates many of these into a single state value.\n\n\n\n\n\n\nInformation about the environment and configuration of the machine, such as version numbers of installed operating systems and Citrix components, including the 'functional level' of the machine.\n\n\n\n\n\n\nData relating to the most recent activity of the machines, such as the last reason for de-registering, the last power action performed on the machine, the last connection failure etc.\n\n\n\n\n\n\nMaintenance mode and 'WindowsConnectionSetting' states for controlling the enable/disable/drain behavior of the machine.\n\n\n\n\n\n\nVisible user-resource settings for the machine for the assigned desktop case, such as icon, published name etc.\n\n\n\n\n\n\nFor multi-session machines (Server OS Machines), aggregate information about the sessions running, such as the number of sessions active, pending etc.\n\n\n\n\n\n\n'Tag' values associated with an assigned machine.\n\n\n\n\n\n\nProvisioning image information, such as the path to the master image, the provisioning scheme used to create the machine, and whether or not the machine has an updated image pending on its next reboot.\n\n\n\n\n\n\nMost of the machine values are exposed by the Broker Service SDK, but items are also exposed\nby other services, such as the Machine Creation Service (MCS). Other values shown on a per-machine basis are inherited from the Catalog or Delivery Group (if any) that the machine is associated with, or from the provisioning scheme used to create it. For example, the machine type\nwhich is defined at the Catalog level by a combination of factors such Physical or Virtual, static or random, how user changes are persisted and others. For single-session machines (Desktop OS Machines), information about the session (if any) that is running on the machine is also associated with the machine. This includes connected user identity, session state, protocol in-use and so on. Machines can exist only in the model if they are defined as part of a Catalog; they cannot exist\noutside of this concept.\n\n\nCatalog\n\n\nA Catalog defines a set of machines that are usually, but not always, expected to be equivalent.\nMultiple Catalogs can exist within a single deployment, enabling different sets of machines to be built and stored for different purposes. The Catalog defines:\n\n\n\n\n\n\nCatalog type, defined by the values of the following properties:\n\n\n\n\n\n\nThe provisioning method for the machines (MCS, PVS or manual)\n\n\n\n\n\n\nHow machines in the Catalog are allocated to users: statically with permanent assignment to users or randomly each time a user requests a resource\n\n\n\n\n\n\nWhether the machines are single-session (Desktop OS Machines) or multi-session (Server OS Machines)\n\n\n\n\n\n\nWhether the machines are physical or virtual\n\n\n\n\n\n\nHow user changes to machines are handled, whether they are discarded after the user logs off or preserved locally on the machine or using Personal vDisk\n\n\n\n\n\n\n\n\n\n\nIf the Catalog is to be used for Remote PC users and, if so, which Active Directory (AD) OUs are to be associated with the Catalog, and which Delivery Groups are associated with the Catalog.\n\n\n\n\n\n\nMCS provisioning-associated details (if MCS provisioning is to be used):\n\n\n\n\n\n\nMaster image for the machines\n\n\n\n\n\n\nMemory size and number of CPUs\n\n\n\n\n\n\nPersonal vDisk disk size, drive letter, and allocation percentages\n\n\n\n\n\n\nAD account naming scheme and OU where the machines are created, and a list of already created accounts\n\n\n\n\n\n\n\n\n\n\nDetails of any PVS server associated with the Catalog.\n\n\n\n\n\n\nThe functional level expected for machines; machines of lower functional level are not allowed to register with the site.\n\n\n\n\n\n\nAlso exposed at the Catalog level are some usage values for machines consumed or available\nin the Catalog.\n\n\nDelivery Group\n\n\nThe Delivery Group provides details about a collection of machines used to provide desktops\nand/or applications to an end-user. Many Delivery Groups can be linked to the same Catalog, enabling machines in a Catalog to be distributed in various ways depending on the requirements of different user sets. The Delivery Group defines:\n\n\n\n\n\n\nThe allocation type of the machines in the group, indicating whether machines are shared between users (random) or assigned persistently to one or more users (static), and whether the machines are single-session (Desktop OS) or multi-session (Server OS) machines.\n\n\n\n\n\n\nThe delivery type of the group, indicating whether the group serves applications only, desktops only, or a mixture of applications and desktops to users.\n\n\n\n\n\n\nSettings controlling the power management of machines in the group, including:\n\n\n\n\n\n\nWhich hours of the day, on different days of the week, are considered 'peak' time\n\n\n\n\n\n\nHow many machines to keep running at different hours of the day on different days of the week for random/unassigned machines, including buffer sizes\n\n\n\n\n\n\nThe timezone to use for evaluating the hours of the day for the above settings\n\n\n\n\n\n\nWhether and how assigned machines are power managed\n\n\n\n\n\n\nWhether and how to shut down or suspend machines after trigger events, such as user disconnect or logoff\n\n\n\n\n\n\nWhether or not the machines are considered corrupted by any sessions run on them and forced to restart to return them back to a clean, known state after each use\n\n\n\n\n\n\n\n\n\n\nHow desktop resources from the group appear to an end-user, including icon used, color depth and name. Also defined is the security level required on the ICA connections for machines in the group. For desktop resources, the number of desktops each user is allowed simultaneously from the group.\n\n\n\n\n\n\nRules used to establish the availability of these machines to the end users. Rules can factor in, not just the user's identity, but also where the user is connecting from and how, what the state of the client device is, and which remoting protocols are supported.\n\n\n\n\n\n\nWhether the group is enabled or disabled, including setting of maintenance mode.\n\n\n\n\n\n\nWhether the end-user is allowed to reset the machine themselves (for example, using StoreFront).\n\n\n\n\n\n\n'Tag' values associated with a random/shared group.\n\n\n\n\n\n\nThe functional level expected for machines in the group; machines of lower functional level are not allowed to register with the site.\n\n\n\n\n\n\nWhether the group is to be used for Remote PC users, and which Remote PC catalogs are associated with the group.\n\n\n\n\n\n\nA schedule for regularly rebooting multi-session (Server OS) machines at a particular time and day, and settings to control how that reboot is done.\n\n\n\n\n\n\nAlso associated with Delivery Groups are settings for features such as Profile management and Storefront URL settings, which are separately defined as 'Machine Configuration' objects and associated with one or more Delivery Groups.\n\n\nApplication\n\n\nThis provides details of a seamless (i.e. floating window, separate from a desktop) application that is to be made available to end-users.Typically, each application is associated with a single delivery group, but application definitions can be shared across multiple groups, if required.\n\n\nApplications can be run either on a remote machine and displayed on the local client desktop, or installed and run on the local client machine with windows overlaid onto a remote desktop. The application defines:\n\n\n\n\n\n\nThe type of the application, whether 'HostedOnDesktop' or 'InstalledOnClient'.\n\n\n\n\n\n\nFor HostedOnDesktop applications:\n\n\n\n\n\n\nThe path to the application initial executable to be run on the VDA machine and the command line parameters, if any, to be supplied when the application is started\n\n\n\n\n\n\nOptionally, a specific set of users who have access to the application as a subset of users who have access to the Delivery Group(s)\n\n\n\n\n\n\nAny application-specific settings to be applied to the application process, including a CPU priority level, whether the application should wait for proxy printers to be created or\nnot, etc.\n\n\n\n\n\n\n\n\n\n\nFor InstalledOnClient applications:\n\n\n\n\n\n\nA flag to indicate that the icon for the application is to be fetched from the client device\n\n\n\n\n\n\nA flag to specify that extra security measures are to be taken with the arguments supplied to the application\n\n\n\n\n\n\n\n\n\n\nHow the application resource appears to an end-user, including icon used, folder location on the client device, name and whether the shortcut appears in the start menu, desktop or both.\n\n\n\n\n\n\nAny file-type associations for the application, associating file extensions with the application.\n\n\n\n\n\n\nWhich Delivery Group(s) it is associated with, along with an optional priority value for choosing between multiple groups.\n\n\n\n\n\n\nWhether the application is enabled and, separately, whether it is visible to end users or not.\n\n\n\n\n\n\nDesktop\n\n\nIn XenDesktop 7, the Desktop object (which describes both the machine and the session on the machine) is replaced by the Session object and the Machine object, both of which have been expanded to do the work of the Desktop object.\n\n\nSession\n\n\nThis provides details of a Windows session running on a machine controlled by the site. The session may be one initiated by XenDesktop or XenApp, or one that was created by other means, such as a user logging directly onto the machine through the console or over RDP.\n\n\nThe session defines:\n\n\n\n\n\n\nThe identity of the machine where the session is running, including machine DNS name, IP address, NetBios name, SID etc.\n\n\n\n\n\n\nThe identity of the user who is running the session, including SAM name, UPN, SID, etc.\n\n\n\n\n\n\nThe identity of the user who brokered the connection to the session, including SAM name, SID, etc.\n\n\n\n\n\n\nThe identity of the endpoint client machine being used to connect to the session, including the device name, IP address, ID.\n\n\n\n\n\n\nThe identity of the machine used to request the launch, i.e. the web server from which the launch was made. This includes name and IP address.\n\n\n\n\n\n\nThe identity of the machine used to act as a gateway for the session connection, including machine DNS name, IP address.\n\n\n\n\n\n\nDetails of significant events in the session, including start time, the time when the session was most recently connected to, brokered to etc.\n\n\n\n\n\n\nThe durations of aspects of the most recent session creation or connection, including the time taken to broker the session, time taken to create the session etc.\n\n\n\n\n\n\nThe current status of the session, including an overall session state, whether the ICA connection is secured, what protocol is being used.\n\n\n\n\n\n\nThe current state of the machine running the session, incuding an overall summary state, power state, etc.\n\n\n\n\n\n\nDetails about how the session connection was made, such as whether the session was brokered or connected to autonomously, the session context 'Smart Access' tags in force.\n\n\n\n\n\n\nWhether the session is 'hidden' or not. Sessions can become hidden if certain types of problems are encountered when a user launches an application or desktop.\n\n\n\n\n\n\nThe list of brokered applications executing in the session.\n\n\n\n\n\n\nThe session SDK objec also provides information from the related machine, Delivery Group an Catalog SDK objects. This information includes identity information, basic configuration and status information.\n\n\nController\n\n\nThis provides details of the individual Delivery Controller machines in the site. Most of the\ndata is dynamic state data from the running site, rather than configuration settings. The controller shows:\n\n\n\n\n\n\nWhich 'site services' are active on each controller.\n\n\n\n\n\n\nThe version of the controller components.\n\n\n\n\n\n\nThe identity of the controller machine, as fully qualified DNS name, SAM name, SID etc.\n\n\n\n\n\n\nThe type and version of the OS of the controller machine.\n\n\n\n\n\n\nCurrent controller and service status, and most recent activity times.\n\n\n\n\n\n\nCounts of machines registered with the controller.\n\n\n\n\n\n\nWhich hypervisor connections are associated with the controller for site service location purposes.\n\n\n\n\n\n\nMost of the controller values are exposed from the Broker Service SDK, but other items are exposed from other services, such as the Machine Creation Service.\n\n\nSite\n\n\nThe Site is a top-level, logical representation of the XenDesktop site, from the\nperspective of the configuration services running within it. The site contains licensing information, site metadata and the site name, among others.\n\n\nA XenDesktop installation has only a single configuration site instance. The Site\nobject has the following properties:\n\n\n\n\n\n\nName\n\n\n\n\n\n\nControllers\u2014list of controllers in the site\n\n\n\n\n\n\nDatabases\u2014list of databases used by the site\n\n\n\n\n\n\nDefaultIconUid\n\n\n\n\n\n\nLicenseInformation\n\n\n\n\n\n\nMetadata\n\n\n\n\n\n\nLog\n\n\nThis provides details of the collected configuration logs, which describe the administrator\nactivity on the site since logging was enabled. Administrator read actions are not logged, but any administrator action that changes the configuration or state of the site is included in the log. You can view the log at one of three levels: high-level logs, low-level logs and\noperation details. Each low-level log is a part of a larger high-level operation which is logged, while operation details describe elements within a single low-level operation. Log items show:\n\n\n\n\n\n\nThe identity of the administrator who performed the operation, including the IP address of the machine from which it was performed.\n\n\n\n\n\n\nWhen the operation took place, both start and end times.\n\n\n\n\n\n\nWhether the operation succeeded or failed for any reason.\n\n\n\n\n\n\nA description of the operation, as a text string and also characterised by operation type, source type, target type etc.\n\n\n\n\n\n\nDetails of parameters supplied to the operation.\n\n\n\n\n\n\nAny parent/child relationship in the log hierarchy.\n\n\n\n\n\n\nFor changes in configuration, a before and after value for the items changed.\n\n\n\n\n\n\nFor more information about what is logged, see the \nConfiguration Logging\n documentation.\n\n\nRight\n\n\nThis defines a combination of role and the scope over which role permissions are\nallowed. Permissions defined in the role can be executed by the specified administrator, but only on objects that are directly or indirectly associated with the specified scope. The Right defines:\n\n\n\n\n\n\nThe role whose permissions are to be allowed.\n\n\n\n\n\n\nThe scope over which the role permissions are to be allowed.\n\n\n\n\n\n\nRights are not SDK objects that can be manipulated separately; they are always associated\nwith a particular Administrator object. A single administrator can have many rights, with the total capability of the administrator being the sum of all their individual rights.\n\n\nScope\n\n\nThis defines a named grouping for objects, where objects in the grouping have administrator rights over objects controlled on a role-by-role basis. SDK objects of\nvarious types can have scopes directly associated with them, such as Catalogs, Delivery Groups, Connections, Resources etc. These SDK objects have properties that list the scopes that the object has been associated with. Other SDK objects have administrator rights granted by a secondary association with other objects which are directly scoped. For example, Machine objects inherit their scope associations from the Catalogs and Delivery Groups they are members of; Session objects inherit their scope associations from the machines on which the session is running. Some scopes are pre-defined (in practice only the 'All' scope is currently built-in) but you can create other scopes to specify suitable grouping definitions for your particular deployment.\n\n\nThe Scope defines:\n\n\n\n\n\n\nThe identity of the scope, which includes a name and an internal ID value (a GUID).\n\n\n\n\n\n\nWhether the scope is built-in or not.\n\n\n\n\n\n\nRole\n\n\nDefines a set of permissions that an administrator can perform. Roles are always granted\nto administrators with an associated scope; they do not provide rights on their own, although some roles may have general permissions that apply to objects which do not have any scopes associated with them ('unscoped objects'). Some roles are pre-defined, but you can create other custom roles to specify suitable sets of permissions for your\nparticular deployment. A Role defines:\n\n\n\n\n\n\nThe identity of the role, which includes a name and an internal ID value (a GUID)\n\n\n\n\n\n\nWhether the role is built-in or not\n\n\n\n\n\n\nThe set of permissions that make up the role\n\n\n\n\n\n\nThe built-in roles are:\n\n\n\n\n\n\nFull Administrator\u2014can perform all tasks and operations.\n\n\n\n\n\n\nRead Only Administrator\u2014can see all objects in specified scopes, as well as global information, but cannot change anything.\n\n\n\n\n\n\nMachine Catalog Administrator\u2014can create and manage Machine Catalogs and provision machines.\n\n\n\n\n\n\nDelivery Group Administrator\u2014can deliver applications, desktops, and machines; can also manage the associated sessions. Allows creation and managing of Delivery Groups and applications.\n\n\n\n\n\n\nHelp Desk Administrator\u2014can view Delivery Groups, and manage the sessions and machines associated with those groups. Allows viewing of end-user resources and limited state change actions for troubleshooting end-user problems, but does not allow most configuration changes.\n\n\n\n\n\n\nHost Administrator\u2014can manage host connections and their associated resource settings.\n\n\n\n\n\n\nPermission\n\n\nDefines a single console-level task or operation that is allowed when the permission is\nincluded in a role. Each permission can allow several low-level SDK operations (cmdlets), and a particular low-level SDK operation can be granted by any number of related permissions. A Permission defines:\n\n\n\n\n\n\nThe identity of the permision, which includes a name and an internal ID value (a GUID).\n\n\n\n\n\n\nThe permission group membersip of the permission. Permission groups collect together permissions relating to a particular functional area.\n\n\n\n\n\n\nThe set of low-level SDK operations covered by the permission.", 
            "title": "Understanding the XenDesktop Administration Model"
        }, 
        {
            "location": "/understandxd/#understanding-the-xendesktop-administration-model", 
            "text": "XenDesktop 7 has an administration model that is defined by a set of objects and their interconnections, as shown in the following illustration.   The following sections describe each object, its responsibilities, characteristics and basic\nproperties.  Connection  A Connection entity provides the details required to establish a connection to the administration point for a virtualization platform. These details are used to provide any power management and provisioning functions that are required. The Connection defines:    The identity of the connection, which includes a name and an internal ID value (a GUID).    Type\u2014XenServer, SCVMM or vCenter.    Username\u2014the account name to use for connections to the hypervisor.    Password\u2014the password to use for connections to the hypervisor.    The state of the connection and whether the hypervisor can be\n    communicated with or not.    Any current alerts raised by the hypervisor.    The password cannot be read back once set and is stored in the database in an encrypted form.  There is one of these entities in the model for each platform definition; however, there will\nbe many connections established to the virtualization platform at run time to service the requirements of the XenDesktop deployment. These connections can be shared by many Resources entities (see below for further details).  Note:  When setting up a Connection with XenServer, you specify a host or XenServer pool;\nwhen setting up a Connection with Microsoft Hyper-V or VMware, you provide details to the management servers (SCVMM or vCenter). Also, when configuring a Connection, you must specify the user name in the correct format, depending on the virtualization solution you're using. If you're\nsetting up a Connection with XenServer, specify a plain user name; for example \"username\"; for a Connection with VMware or Hyper-V, specify a domain user name; for example \"domain\\username\".  Resources  Note:  This applies only to the creation of new machines when using Machine Creation Services (MCS) or Provisioning Services (PVS).  This setting defines a set of resources within the virtualization platform that are available for the product to consume. This allows the administrator to constrain deployment to a subset of the resources that the platform provides, and enables differing sets of resources to be defined for different purposes. This can control the storage and networking usage of machines provisioned within the site. The Resources entity defines:    Networks\u2014the networks which are able to be used when provisioning new machines into the virtualization plaform (for PVS, this is the streaming network; only one can be chosen or the first one is used).    Storage\u2014the storage to use when provisioning new machines into the virtualization platform.    At least one Resources setting must be defined for each Connection object if a provisioning\nmechanism is to be used. Many Resources settings can be linked to a single Connection.  The connection details are provided by the Connection entity.  Note:  When specifying Resources on a Connection to either SCVMM or vCenter, you select the host or cluster as well as the storage and networking.  Administrator  This defines the person who can administer the product. There can be various administrators of\nthe product, each with a different set of capabilities within the product. The Administrator defines:    The AD account the administrator is defined by, defined as their name and SID value.\n    This can be an individual user or a security group.    The rights the administrator has (i.e. what roles are available over which scopes).    Machine  A machine is a representation of a virtual or physical computer that can be used within\na site to provide sessions to users. The machine defines:    Identity of the machine, such as SAM name, DNS name, host (hypervisor) name, IP address, SID, License ID etc.    Status of the machine, including power state, registration state, Personal vDisk state, load index etc. A summary state value aggregates many of these into a single state value.    Information about the environment and configuration of the machine, such as version numbers of installed operating systems and Citrix components, including the 'functional level' of the machine.    Data relating to the most recent activity of the machines, such as the last reason for de-registering, the last power action performed on the machine, the last connection failure etc.    Maintenance mode and 'WindowsConnectionSetting' states for controlling the enable/disable/drain behavior of the machine.    Visible user-resource settings for the machine for the assigned desktop case, such as icon, published name etc.    For multi-session machines (Server OS Machines), aggregate information about the sessions running, such as the number of sessions active, pending etc.    'Tag' values associated with an assigned machine.    Provisioning image information, such as the path to the master image, the provisioning scheme used to create the machine, and whether or not the machine has an updated image pending on its next reboot.    Most of the machine values are exposed by the Broker Service SDK, but items are also exposed\nby other services, such as the Machine Creation Service (MCS). Other values shown on a per-machine basis are inherited from the Catalog or Delivery Group (if any) that the machine is associated with, or from the provisioning scheme used to create it. For example, the machine type\nwhich is defined at the Catalog level by a combination of factors such Physical or Virtual, static or random, how user changes are persisted and others. For single-session machines (Desktop OS Machines), information about the session (if any) that is running on the machine is also associated with the machine. This includes connected user identity, session state, protocol in-use and so on. Machines can exist only in the model if they are defined as part of a Catalog; they cannot exist\noutside of this concept.  Catalog  A Catalog defines a set of machines that are usually, but not always, expected to be equivalent.\nMultiple Catalogs can exist within a single deployment, enabling different sets of machines to be built and stored for different purposes. The Catalog defines:    Catalog type, defined by the values of the following properties:    The provisioning method for the machines (MCS, PVS or manual)    How machines in the Catalog are allocated to users: statically with permanent assignment to users or randomly each time a user requests a resource    Whether the machines are single-session (Desktop OS Machines) or multi-session (Server OS Machines)    Whether the machines are physical or virtual    How user changes to machines are handled, whether they are discarded after the user logs off or preserved locally on the machine or using Personal vDisk      If the Catalog is to be used for Remote PC users and, if so, which Active Directory (AD) OUs are to be associated with the Catalog, and which Delivery Groups are associated with the Catalog.    MCS provisioning-associated details (if MCS provisioning is to be used):    Master image for the machines    Memory size and number of CPUs    Personal vDisk disk size, drive letter, and allocation percentages    AD account naming scheme and OU where the machines are created, and a list of already created accounts      Details of any PVS server associated with the Catalog.    The functional level expected for machines; machines of lower functional level are not allowed to register with the site.    Also exposed at the Catalog level are some usage values for machines consumed or available\nin the Catalog.  Delivery Group  The Delivery Group provides details about a collection of machines used to provide desktops\nand/or applications to an end-user. Many Delivery Groups can be linked to the same Catalog, enabling machines in a Catalog to be distributed in various ways depending on the requirements of different user sets. The Delivery Group defines:    The allocation type of the machines in the group, indicating whether machines are shared between users (random) or assigned persistently to one or more users (static), and whether the machines are single-session (Desktop OS) or multi-session (Server OS) machines.    The delivery type of the group, indicating whether the group serves applications only, desktops only, or a mixture of applications and desktops to users.    Settings controlling the power management of machines in the group, including:    Which hours of the day, on different days of the week, are considered 'peak' time    How many machines to keep running at different hours of the day on different days of the week for random/unassigned machines, including buffer sizes    The timezone to use for evaluating the hours of the day for the above settings    Whether and how assigned machines are power managed    Whether and how to shut down or suspend machines after trigger events, such as user disconnect or logoff    Whether or not the machines are considered corrupted by any sessions run on them and forced to restart to return them back to a clean, known state after each use      How desktop resources from the group appear to an end-user, including icon used, color depth and name. Also defined is the security level required on the ICA connections for machines in the group. For desktop resources, the number of desktops each user is allowed simultaneously from the group.    Rules used to establish the availability of these machines to the end users. Rules can factor in, not just the user's identity, but also where the user is connecting from and how, what the state of the client device is, and which remoting protocols are supported.    Whether the group is enabled or disabled, including setting of maintenance mode.    Whether the end-user is allowed to reset the machine themselves (for example, using StoreFront).    'Tag' values associated with a random/shared group.    The functional level expected for machines in the group; machines of lower functional level are not allowed to register with the site.    Whether the group is to be used for Remote PC users, and which Remote PC catalogs are associated with the group.    A schedule for regularly rebooting multi-session (Server OS) machines at a particular time and day, and settings to control how that reboot is done.    Also associated with Delivery Groups are settings for features such as Profile management and Storefront URL settings, which are separately defined as 'Machine Configuration' objects and associated with one or more Delivery Groups.  Application  This provides details of a seamless (i.e. floating window, separate from a desktop) application that is to be made available to end-users.Typically, each application is associated with a single delivery group, but application definitions can be shared across multiple groups, if required.  Applications can be run either on a remote machine and displayed on the local client desktop, or installed and run on the local client machine with windows overlaid onto a remote desktop. The application defines:    The type of the application, whether 'HostedOnDesktop' or 'InstalledOnClient'.    For HostedOnDesktop applications:    The path to the application initial executable to be run on the VDA machine and the command line parameters, if any, to be supplied when the application is started    Optionally, a specific set of users who have access to the application as a subset of users who have access to the Delivery Group(s)    Any application-specific settings to be applied to the application process, including a CPU priority level, whether the application should wait for proxy printers to be created or\nnot, etc.      For InstalledOnClient applications:    A flag to indicate that the icon for the application is to be fetched from the client device    A flag to specify that extra security measures are to be taken with the arguments supplied to the application      How the application resource appears to an end-user, including icon used, folder location on the client device, name and whether the shortcut appears in the start menu, desktop or both.    Any file-type associations for the application, associating file extensions with the application.    Which Delivery Group(s) it is associated with, along with an optional priority value for choosing between multiple groups.    Whether the application is enabled and, separately, whether it is visible to end users or not.    Desktop  In XenDesktop 7, the Desktop object (which describes both the machine and the session on the machine) is replaced by the Session object and the Machine object, both of which have been expanded to do the work of the Desktop object.  Session  This provides details of a Windows session running on a machine controlled by the site. The session may be one initiated by XenDesktop or XenApp, or one that was created by other means, such as a user logging directly onto the machine through the console or over RDP.  The session defines:    The identity of the machine where the session is running, including machine DNS name, IP address, NetBios name, SID etc.    The identity of the user who is running the session, including SAM name, UPN, SID, etc.    The identity of the user who brokered the connection to the session, including SAM name, SID, etc.    The identity of the endpoint client machine being used to connect to the session, including the device name, IP address, ID.    The identity of the machine used to request the launch, i.e. the web server from which the launch was made. This includes name and IP address.    The identity of the machine used to act as a gateway for the session connection, including machine DNS name, IP address.    Details of significant events in the session, including start time, the time when the session was most recently connected to, brokered to etc.    The durations of aspects of the most recent session creation or connection, including the time taken to broker the session, time taken to create the session etc.    The current status of the session, including an overall session state, whether the ICA connection is secured, what protocol is being used.    The current state of the machine running the session, incuding an overall summary state, power state, etc.    Details about how the session connection was made, such as whether the session was brokered or connected to autonomously, the session context 'Smart Access' tags in force.    Whether the session is 'hidden' or not. Sessions can become hidden if certain types of problems are encountered when a user launches an application or desktop.    The list of brokered applications executing in the session.    The session SDK objec also provides information from the related machine, Delivery Group an Catalog SDK objects. This information includes identity information, basic configuration and status information.  Controller  This provides details of the individual Delivery Controller machines in the site. Most of the\ndata is dynamic state data from the running site, rather than configuration settings. The controller shows:    Which 'site services' are active on each controller.    The version of the controller components.    The identity of the controller machine, as fully qualified DNS name, SAM name, SID etc.    The type and version of the OS of the controller machine.    Current controller and service status, and most recent activity times.    Counts of machines registered with the controller.    Which hypervisor connections are associated with the controller for site service location purposes.    Most of the controller values are exposed from the Broker Service SDK, but other items are exposed from other services, such as the Machine Creation Service.  Site  The Site is a top-level, logical representation of the XenDesktop site, from the\nperspective of the configuration services running within it. The site contains licensing information, site metadata and the site name, among others.  A XenDesktop installation has only a single configuration site instance. The Site\nobject has the following properties:    Name    Controllers\u2014list of controllers in the site    Databases\u2014list of databases used by the site    DefaultIconUid    LicenseInformation    Metadata    Log  This provides details of the collected configuration logs, which describe the administrator\nactivity on the site since logging was enabled. Administrator read actions are not logged, but any administrator action that changes the configuration or state of the site is included in the log. You can view the log at one of three levels: high-level logs, low-level logs and\noperation details. Each low-level log is a part of a larger high-level operation which is logged, while operation details describe elements within a single low-level operation. Log items show:    The identity of the administrator who performed the operation, including the IP address of the machine from which it was performed.    When the operation took place, both start and end times.    Whether the operation succeeded or failed for any reason.    A description of the operation, as a text string and also characterised by operation type, source type, target type etc.    Details of parameters supplied to the operation.    Any parent/child relationship in the log hierarchy.    For changes in configuration, a before and after value for the items changed.    For more information about what is logged, see the  Configuration Logging  documentation.  Right  This defines a combination of role and the scope over which role permissions are\nallowed. Permissions defined in the role can be executed by the specified administrator, but only on objects that are directly or indirectly associated with the specified scope. The Right defines:    The role whose permissions are to be allowed.    The scope over which the role permissions are to be allowed.    Rights are not SDK objects that can be manipulated separately; they are always associated\nwith a particular Administrator object. A single administrator can have many rights, with the total capability of the administrator being the sum of all their individual rights.  Scope  This defines a named grouping for objects, where objects in the grouping have administrator rights over objects controlled on a role-by-role basis. SDK objects of\nvarious types can have scopes directly associated with them, such as Catalogs, Delivery Groups, Connections, Resources etc. These SDK objects have properties that list the scopes that the object has been associated with. Other SDK objects have administrator rights granted by a secondary association with other objects which are directly scoped. For example, Machine objects inherit their scope associations from the Catalogs and Delivery Groups they are members of; Session objects inherit their scope associations from the machines on which the session is running. Some scopes are pre-defined (in practice only the 'All' scope is currently built-in) but you can create other scopes to specify suitable grouping definitions for your particular deployment.  The Scope defines:    The identity of the scope, which includes a name and an internal ID value (a GUID).    Whether the scope is built-in or not.    Role  Defines a set of permissions that an administrator can perform. Roles are always granted\nto administrators with an associated scope; they do not provide rights on their own, although some roles may have general permissions that apply to objects which do not have any scopes associated with them ('unscoped objects'). Some roles are pre-defined, but you can create other custom roles to specify suitable sets of permissions for your\nparticular deployment. A Role defines:    The identity of the role, which includes a name and an internal ID value (a GUID)    Whether the role is built-in or not    The set of permissions that make up the role    The built-in roles are:    Full Administrator\u2014can perform all tasks and operations.    Read Only Administrator\u2014can see all objects in specified scopes, as well as global information, but cannot change anything.    Machine Catalog Administrator\u2014can create and manage Machine Catalogs and provision machines.    Delivery Group Administrator\u2014can deliver applications, desktops, and machines; can also manage the associated sessions. Allows creation and managing of Delivery Groups and applications.    Help Desk Administrator\u2014can view Delivery Groups, and manage the sessions and machines associated with those groups. Allows viewing of end-user resources and limited state change actions for troubleshooting end-user problems, but does not allow most configuration changes.    Host Administrator\u2014can manage host connections and their associated resource settings.    Permission  Defines a single console-level task or operation that is allowed when the permission is\nincluded in a role. Each permission can allow several low-level SDK operations (cmdlets), and a particular low-level SDK operation can be granted by any number of related permissions. A Permission defines:    The identity of the permision, which includes a name and an internal ID value (a GUID).    The permission group membersip of the permission. Permission groups collect together permissions relating to a particular functional area.    The set of low-level SDK operations covered by the permission.", 
            "title": "Understanding the XenDesktop Administration Model"
        }, 
        {
            "location": "/getstarted/", 
            "text": "Get started with the SDK\n\n\nTo create a script,perform the following steps:\n\n\n\n\n\n\nUse Citrix Studio to perform the operation that you want to script; for example, to\n    create a catalog for a set of Machine Creation Services Machines.\n\n\n\n\n\n\nCollect the log of SDK operations that Studio made to perform\n    the task.\n\n\n\n\n\n\nReview the script to understand what each part is doing. This will\n    help you with the customization of your own script. For more\n    information, see the example use case which explains in detail what\n    the script is doing.\n\n\n\n\n\n\nConvert and adapt the Studio script fragment to turn it into a\n    script that is more consumable. To do this:\n\n\n\n\n\n\nUse variables. Some cmdlets take parameters, such as TaskId.\n    However, it may not be clear where the value used in these\n    parameters comes from because Studio uses values from the result\n    objects from earlier cmdlets.\n\n\n\n\n\n\nRemove any commands that are not required.\n\n\n\n\n\n\nAdd some steps into a loop so that these can be\n    easily controlled. For example, add machine creation into a loop\n    so that the number of machines being created can be controlled.\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nNote:\n When creating a script, to ensure you always get the latest enhancements and fixes,\nCitrix recommends you follow the procedure described above rather than\ncopying and pasting the example scripts.\n\n\n\n\n\n\n\n\nExamples\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nExample: Create catalog\n\n\nScript: create a catalog for a set of Machine Creation Services (MCS) machines\n\n\n\n\n\n\nExample: Create and configure a host\n\n\nScript: create and configure a host\n\n\n\n\n\n\nExample: Create a PvD Desktop\n\n\nScript: create a Delivery Group containing Personal vDisk (PvD) desktops\n\n\n\n\n\n\nExample: Get load balancing information \n\n\nDisplay load index values for Server OS Machines", 
            "title": "Getting Started Guide"
        }, 
        {
            "location": "/getstarted/#get-started-with-the-sdk", 
            "text": "To create a script,perform the following steps:    Use Citrix Studio to perform the operation that you want to script; for example, to\n    create a catalog for a set of Machine Creation Services Machines.    Collect the log of SDK operations that Studio made to perform\n    the task.    Review the script to understand what each part is doing. This will\n    help you with the customization of your own script. For more\n    information, see the example use case which explains in detail what\n    the script is doing.    Convert and adapt the Studio script fragment to turn it into a\n    script that is more consumable. To do this:    Use variables. Some cmdlets take parameters, such as TaskId.\n    However, it may not be clear where the value used in these\n    parameters comes from because Studio uses values from the result\n    objects from earlier cmdlets.    Remove any commands that are not required.    Add some steps into a loop so that these can be\n    easily controlled. For example, add machine creation into a loop\n    so that the number of machines being created can be controlled.      Examples  Note:  When creating a script, to ensure you always get the latest enhancements and fixes,\nCitrix recommends you follow the procedure described above rather than\ncopying and pasting the example scripts.     Examples  Description      Example: Create catalog  Script: create a catalog for a set of Machine Creation Services (MCS) machines    Example: Create and configure a host  Script: create and configure a host    Example: Create a PvD Desktop  Script: create a Delivery Group containing Personal vDisk (PvD) desktops    Example: Get load balancing information   Display load index values for Server OS Machines", 
            "title": "Get started with the SDK"
        }, 
        {
            "location": "/example1/", 
            "text": "Example: Create a catalog\n\n\nThe following example shows how to create a catalog for a set of Machine Creation Services\n(MCS) machines.\n\n\nBefore you begin, make sure you follow the steps detailed in \nGet started with the\nSDK\n.\n\n\nThis document tells you how to use Studio to perform the operation you want to script (in this case, to create a catalog for a set of Machine Creation Services machines) and collect the log of SDK operations that Studio made to perform the task. This output can then be customized to produce a script for automating catalog creation.\n\n\nNote:\n To ensure you always get the latest enhancements and fixes, Citrix recommends you\nfollow the procedure described in this document, rather than copying and pasting the example script. Line numbers and line breaks have been added to the script for readability.\n\n\nUnderstand the script\n\n\nThe following section explains what each part of the script produced by Studio is doing. This\nwill help you with the customization of your own script. Line numbers have been added for readability.\n\n\n1\n.\n \nStart-LogHighLevelOperation\n \n-AdminAddress\n\n\nddc.dumdev.internal.citrix.com:80\n \n-Source\n \nStudio\n \n-StartTime\n \n29\n/\n05\n/\n2013\n \n14\n:\n43\n:\n08\n \n-Text\n \nCreate Machine Catalog `\nExampleMachines\n`\n\n\n\n\n\n\nStarts a logged operation and returns a log ID which is supplied to subsequent\noperations to associate them with the larger task.\n\n\n2\n.\n \nNew-BrokerCatalog\n\n\n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-AllocationType\n \nPermanent\n \n-Description\n \nExample Machines\n \n-IsRemotePC\n \n$False\n \n-LoggingId\n\n\nf39a2792\n-\n064a\n-\n43eb\n-\n97c7\n-\n397cc1238e46\n \n-MinimumFunctionalLevel\n \nL7\n \n-Name\n \nExampleMachines\n \n-PersistUserChanges\n \nOnPvd\n \n-ProvisioningType\n \nMCS\n \n-Scope\n \n@()\n \n\n-SessionSupport\n \nSingleSession\n\n\n\n\n\n\nCreates a Broker\ncatalog. This catalog is populated with machines which are about to be\ncreated.\n\n\n3\n.\n \nNew-AcctIdentityPool\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-AllowUnicode\n \n-Domain\n \ndumdev.internal.citrix.com\n \n   \n-IdentityPoolName\n \nExampleMachines\n \n-LoggingId\n \nf39a2792\n-\n064a\n-\n43eb\n-\n97c7\n-\n397cc1238e46\n \n-NamingScheme\n \nExample-####\n \n-NamingSchemeType\n \nNumeric\n \n   \n-OU\n \nOU=DUMVMs,DC=dumdev,DC=internal,DC=citrix,DC=com\n \n-Scope\n \n@()\n\n\n\n\n\n\nCreates an Identity Pool. This defines the mechanism for creating AD computer accounts. This\nbecomes a container for AD accounts created for the machines that are to be created.\n\n\n4\n.\n \nSet-BrokerCatalogMetadata\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-CatalogId\n \n1\n \n-LoggingId\n \nf39a2792\n-\n064a\n-\n43eb\n-\n97c7\n-\n397cc1238e46\n \n-Name\n\n\nCitrix_DesktopStudio_IdentityPoolUid\n \n-Value\n \nb99aee6d-8772-4dbc-978b-8eb9a26e2407\n\n\n\n\n\n\nSets metadata on the Broker catalog with details of the Identity Pool. This is not essential.\n\n\n5\n.\n \nTest-ProvSchemeNameAvailable\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-ProvisioningSchemeName\n \n@(\nExampleMachines\n)\n\n\n\n\n\n\nChecks that the requested name is available. This is not essential.\n\n\n6\n.\n \nNew-ProvScheme\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-CleanOnBoot\n \n-HostingUnitName\n \nSharedNFS\n \n-IdentityPoolName\n \nExampleMachines\n \n-LoggingId\n\n\nf39a2792\n-\n064a\n-\n43eb\n-\n97c7\n-\n397cc1238e46\n \n-MasterImageVM\n \nXDHyp:\\hostingunits\\SharedNFS\\BaseVM.vm\\Base OS,\n\n\ndomain joined and activated.snapshot \\Pre-reqs installed.snapshot\\\\Updates Applied.snapshot\\VDA75-no agent.snapshot\\Updated Agent.snapshot\n \n\n-NetworkMapping\n \n@{\n0\n=\nxdhyp:\\hostingunits\\SharedNFS\\Network0.network\n}\n \n-PersonalVDiskDriveLetter\n \nP\n \n-PersonalVDiskDriveSize\n \n10\n \n-ProvisioningSchemeName\n \nExampleMachines\n \n\n-RunAsynchronously\n \n-Scope\n \n@()\n \n-UsePersonalVDiskStorage\n \n-VMCpuCount\n \n1\n \n-VMMemoryMB\n \n1024\n\n\n\n\n\n\nCreates a provisioning scheme object. This is a template for the machines that are to be created. It specifies the hypervisor, network, storage, memory, number of CPUs to be used etc. It takes parameters from the system already set up, such as the HostingUnit name and the path to the VM snapshot to be used for the machines to be created. This command makes a 'consolidated' copy of the VM snapshot being used and, as a result, the process can take time to complete.\n\n\nIn this example, the Studio script specified the -RunAsyncronous flag on this command. This means the command will return control to the administrator before it has completed, so you must wait for it to finish before performing any operations that require it to be complete. If this flag is not specified, the command runs synchronously in-line and control is not returned until the command completes (successfully or otherwise). You can check the status of an asynchronous task using the Get-ProvTask cmdlet. Supply the task ID returned from the operation that started the task; in this case, the New-ProvScheme cmdlet.\n\n\n7\n.\n \nSet-BrokerCatalog\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-LoggingId\n \nf39a2792\n-\n064a\n-\n43eb\n-\n97c7\n-\n397cc1238e46\n \n-Name\n \nExampleMachines\n \n   \n-ProvisioningSchemeId\n \n76125e3a\n-\n9001\n-\n4993\n-\n86b6-eefc85c87880\n\n\n\n\n\n\nUpdates the BrokerCatalog with the unique Id of the provisioning scheme created above.\n\n\n8\n.\n \nAdd-ProvSchemeControllerAddress\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-ControllerAddress\n \n@(\nDDC.dumdev.internal.citrix.com\n)\n \n\n-LoggingId\n \nf39a2792\n-\n064a\n-\n43eb\n-\n97c7\n-\n397cc1238e46\n \n-ProvisioningSchemeName\n \nExampleMachines\n\n\n\n\n\n\nAdds a set of controller addresses to the provisioning scheme object. This is a list of addresses that the machines created can use to register with a Controller (broker) when deployed. The machines' registration addresses can be supplied in many ways; however, this information is required if the administrator wants to use the 'Allow Machine Creation Service to supply this' in the VDA installer. Changes to this list affect only machines created after the change, not existing machines.\n\n\n9\n.\n \nGet-AcctADAccount\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-IdentityPoolUid\n \nb99aee6d\n-\n8772\n-\n4dbc\n-\n978b\n-\n8eb9a26e2407\n \n-Lock\n \n$False\n \n-MaxRecordCount\n \n2147483647\n \n-State\n \nAvailable\n\n\n\n\n\n\nStudio gets a list of available Machine Identities from the Identity Pool so that, if existing accounts have been created in the past but are unused, these can be consumed instead of creating new accounts. Note that this is not required in a script because new accounts can be created instead, provided the script is running in a context that has permissions to do this. However, if the script does not have permissions to create accounts, change the script to consume available accounts (a separate process will be required to provide a pool of accounts into the Identity Pool, before running the script).\n\n\n10\n.\n \nNew-AcctADAccount\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-Count\n \n2\n \n-IdentityPoolUid\n \nb99aee6d\n-\n8772\n-\n4dbc\n-\n978b\n-\n8eb9a26e2407\n \n-LoggingId\n\n\nf39a2792\n-\n064a\n-\n43eb\n-\n97c7\n-\n397cc1238e46\n\n\n\n\n\n\nCreates the required AD computer accounts in Active Directory. The script creates one account\nbut, if required, it can create more using the 'Count' parameter of the command. The accounts are created into the OU defined in the provisioning scheme created above.\n\n\n11\n.\n \nNew-ProvVM\n \n-ADAccountName\n \n@(\nDUMDEV\\Example-0001\\$\n,\nDUMDEV\\Example-0002\\$\n)\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-LoggingId\n\n\nf39a2792\n-\n064a\n-\n43eb\n-\n97c7\n-\n397cc1238e46\n \n-ProvisioningSchemeName\n \nExampleMachines\n \n-RunAsynchronously\n\n\n\n\n\n\nCreates virtual machines, based on the template definition in the provisioning scheme\ncreated above. This process may take time to complete.\n\n\n12\n.\n \nLock-ProvVM\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-LoggingId\n \nf39a2792\n-\n064a\n-\n43eb\n-\n97c7\n-\n397cc1238e46\n \n    \n-ProvisioningSchemeName\n \nExampleMachines\n \n-Tag\n \nBrokered\n \n-VMID\n \n@(\n0710bb77-d01f-d006-4d67-5472e5cd349f\n)\n\n\n\n\n\n\nLocks the provisioned virtual machines and prevents accidental modification of the virtual\nmachine. Consumers of the SDK can use this to indicate that the virtual machine is in use and why it is locked. The script locks the VM with a tag of 'Brokered' to indicate the virtual machine is created and added to a Broker catalog and must not be deleted without first being removed from the catalog. You can set the Tag name to whatever is required.\n\n\n13\n.\n \nNew-BrokerMachine\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-CatalogUid\n \n1\n \n-HostedMachineId\n \n0710bb77-d01f-d006-4d67-5472e5cd349f\n \n-HypervisorConnectionUid\n \n1\n\n\n-LoggingId\n \nf39a2792\n-\n064a\n-\n43eb\n-\n97c7\n-\n397cc1238e46\n \n-MachineName\n \nS-1-5-21-3918710733-2340574387-1999698698-109114\n\n\n\n\n\n\nCreates a Broker Machine object. These are objects stored in the catalog which join the\nprovisioned machine with the catalog.\n\n\n14\n.\n \nStart-BrokerMachinePvdImagePrepare\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-InputObject\n \n@(\n2\n)\n \n-LoggingId\n \nf39a2792\n-\n064a\n-\n43eb\n-\n97c7\n-\n397cc1238e46\n\n\n\n\n\n\nRequests the Broker Service to initiate a preparation operation for Personal vDisk. This is required to allow the machine to initialize the storage for Personal vDisk.\n\n\n15\n.\n \nStop-LogHighLevelOperation\n \n-AdminAddress\n \nddc.dumdev.internal.citrix.com:80\n \n-HighLevelOperationId\n \nf39a2792\n-\n064a\n-\n43eb\n-\n97c7\n-\n397cc1238e46\n \n-IsSuccessful\n \n$true\n\n\n\n\n\n\nStops the logged operation begun in the first step and indicates it was successful.\n\n\nCustomize the script\n\n\nThe following section shows how to convert and adapt the Studio output into a script that is\nmore consumable. In addition to using variables and removing commands that are not required, it shows how to add machine creation into a loop so that you can control the number of machines created. Line numbers have been added for readability.\n\n\n1\n[\nCmdletBinding\n()]\n\n\n\nparam\n\n\n\n(\n\n\n\n[\nParameter\n(\nMandatory\n=\n$true\n)]\n \n[string]\n \n$hostingUnitPath\n,\n\n\n\n[\nParameter\n(\nMandatory\n=\n$true\n)]\n \n[string]\n \n$catalogName\n,\n\n\n\n[string]\n \n$catalogDescription\n,\n\n\n\n[\nParameter\n(\nMandatory\n=\n$true\n)]\n \n[int]\n \n$numVmsToCreate\n,\n\n\n\n[string]\n \n$adminAddress\n,\n\n\n\n[\nParameter\n(\nMandatory\n=\n$true\n)]\n \n[string]\n \n$namingScheme\n,\n\n\n\n[string]\n \n$OU\n,\n\n\n\n[\nParameter\n(\nMandatory\n=\n$true\n)]\n \n[string]\n \n$domain\n,\n\n\n\n[\nParameter\n(\nMandatory\n=\n$true\n)]\n \n[string]\n \n$masterImagePath\n\n\n\n)\n\n\n\n2\n.\n \nSet-HypAdminConnection\n \n-AdminAddress\n \n$adminAddress\n\n\n\n3\n.\n \n$hostingUnit\n \n=\n \nget-item\n \n$hostingUnitPath\n\n\n\n4\n.\n \n$hostConnection\n \n=\n \n$hostingUnit\n.\nhypervisorConnection\n\n\n\n5\n.\n \n$brokerHypConnection\n \n=\n \nGet-BrokerHypervisorConnection\n \n-HypHypervisorConnectionUid\n \n$hostConnection\n.\nHypervisorConnectionUid\n\n\n\n6\n.\n \n# Start logged operation\n\n\n\n7\n.\n \n$loggingOp\n \n=\n \nStart-LogHighLevelOperation\n \n-AdminAddress\n \n$adminAddress\n \n-Source\n \nScripted\n \n-Text\n \nCreate Machine Catalog \n`\n$catalogName\n`\n\n\n\n8\n.\n \n$loggingId\n \n=\n \n$loggingOp\n.\nId\n\n\n\n9\n.\n \n# Create the broker catalog and the AD Identity account pool\n\n\n\n10\n.\n \n$catalog\n \n=\n \nNew-BrokerCatalog\n \n-AllocationType\n \nPermanent\n \n-Description\n \n$catalogDescription\n \n-IsRemotePC\n \n$False\n\n\n\n-MinimumFunctionalLevel\n \nL7\n \n-Name\n \n$catalogName\n \n-PersistUserChanges\n\n\nOnPvd\n \n-ProvisioningType\n \nMCS\n \n-Scope\n \n@()\n \n-SessionSupport\n \nSingleSession\n \n-LoggingId\n \n$loggingId\n \n-AdminAddress\n\n\n$adminAddress\n\n\n\n11\n.\n \n$adPool\n \n=\n \nNew-AcctIdentityPool\n \n-IdentityPoolName\n \n$catalogName\n\n\n-NamingScheme\n \n$namingScheme\n\n\n\n-NamingSchemeType\n \nNumeric\n \n-OU\n \n$OU\n \n-Domain\n \n$domain\n \n-AllowUnicode\n\n\n-LoggingId\n \n$loggingId\n \n-AdminAddress\n \n$adminAddress\n\n\n\n12\n.\n \nSet-BrokerCatalogMetadata\n \n-CatalogId\n \n$catalog\n.\nUid\n \n-Name\n\n\nCitrix_DesktopStudio_IdentityPoolUid\n \n-Value\n \n$adPool\n.\nIdentityPoolUid\n \n-LoggingId\n \n$loggingId\n \n-AdminAddress\n\n\n$adminAddress\n\n\n\n13\n.\n \n###################################################################\n\n\n\n14\n.\n \n#create the ProvisioningScheme and wait for it to complete (reporting progress)\n\n\n\n15\n.\n \n$provSchemeTaskID\n \n=\n \nNew-ProvScheme\n \n-ProvisioningSchemeName\n\n\n$catalogName\n \n-HostingUnitUID\n \n$hostingUnit\n.\nHostingUnitUID\n\n\n\n-IdentityPoolUID\n \n$adpool\n.\nIdentityPoolUid\n \n-CleanOnBoot\n \n-MasterImageVM\n\n\n$masterImagePath\n \n-UsePersonalVDiskStorage\n\n\n\n-PersonalVDiskDriveLetter\n \nP\n \n-PersonalVDiskDriveSize\n \n10\n \n-RunAsynchronously\n \n\n-LoggingId\n \n$loggingId\n \n-AdminAddress\n \n$adminAddress\n\n\n\n16\n.\n \n$ProvTask\n \n=\n \nget-provTask\n \n-TaskID\n \n$provSchemeTaskID\n \n-AdminAddress\n \n$adminAddress\n\n\n\n17\n.\n \n$taskProgress\n \n=\n \n0\n\n\n\n18\n.\n \nwrite-host\n \nCreating New ProvScheme\n\n\n\n19\n.\n \nwhile\n \n(\n$provTask\n.\nActive\n \n-eq\n \n$true\n)\n\n\n\n20\n.\n \n{\n\n\n\n21\n.\n \n# catch an uninitialized task progress, this occurs until the product initialized the value\n\n\n\n22\n.\n \ntry\n \n{\n$totalPercent\n \n=\n \nif\n \n(\n$provTask\n.\nTaskProgress\n){\n$provTask\n.\nTaskProgress\n}\n \nelse\n \n{\n0\n}}\n \ncatch\n \n{}\n\n\n\n23\n.\n \nWrite-Progress\n \n-activity\n \nCreating Provisioning Scheme:\n \n-status\n \n$totalPercent% Complete:\n \n-percentcomplete\n \n$totalPercent\n\n\n\n24\n.\n \nsleep\n \n30\n\n\n\n25\n.\n \n$ProvTask\n \n=\n \nget-provTask\n \n-TaskID\n \n$provSchemeTaskID\n \n-AdminAddress\n \n$adminAddress\n\n\n\n26\n.\n \n}\n\n\n\n27\n.\n \nwrite-host\n \nNew ProvScheme Creation Finished\n\n\n\n28\n.\n \n$provScheme\n \n=\n \nget-provScheme\n \n-ProvisioningSchemeUID\n \n$provTask\n.\nProvisioningSchemeUid\n\n\n\n29\n.\n \n$controllers\n \n=\n \nGet-BrokerController\n \n|\n \nselect\n \nDNSName\n\n\n\n30\n.\n \nAdd-ProvSchemeControllerAddress\n \n-ProvisioningSchemeUID\n \n$provScheme\n.\nProvisioningSchemeUID\n \n-ControllerAddress\n \n$controllers\n \n-LoggingId\n \n$loggingId\n \n-AdminAddress\n \n$adminAddress\n\n\n\n31\n.\n \n###################################################################\n\n\n\n32\n.\n \n# Set the provisioning scheme id for the broker catalog\n\n\n\n33\n.\n \nSet-BrokerCatalog\n \n-InputObject\n \n$catalog\n \n-ProvisioningSchemeId\n \n$provTask\n.\nProvisioningSchemeUid\n \n-LoggingId\n \n$loggingId\n \n-AdminAddress\n \n$adminAddress\n\n\n\n34\n.\n \n###################################################################\n\n\n\n35\n.\n \n# create the AD accounts required and then create the Virtual machines (reporting progress)\n\n\n\n36\n.\n \n$accts\n \n=\n \nNew-AcctADAccount\n \n-IdentityPoolUid\n \n$adPool\n.\nIdentityPoolUid\n \n-Count\n \n$numVMsToCreate\n \n-LoggingId\n \n$loggingId\n \n-AdminAddress\n \n$adminAddress\n\n\n\n37\n.\n \n$provVMTaskID\n \n=\n \nNew-ProvVM\n \n-ProvisioningSchemeUID\n \n$provScheme\n.\nProvisioningSchemeUID\n\n\n\n-ADAccountName\n \n$accts\n.\nSuccessfulAccounts\n \n-RunAsynchronously\n \n-LoggingId\n \n$loggingId\n \n-AdminAddress\n \n$adminAddress\n\n\n\n38\n.\n \n# wait for the VMS to finish Provisioning\n\n\n\n39\n.\n \n$ProvTask\n \n=\n \nget-provTask\n \n-TaskID\n \n$provVMTaskID\n \n-AdminAddress\n \n$adminAddress\n\n\n\n40\n.\n \nwhile\n \n(\n$provTask\n.\nActive\n \n-eq\n \n$true\n)\n\n\n\n41\n.\n \n{\n\n\n\n42\n.\n \n# catch an uninitialized task progress, this occurs until the product initialized the value\n\n\n\n43\n.\n \ntry\n \n{\n$totalPercent\n \n=\n \nif\n \n(\n$provTask\n.\nTaskProgress\n){\n$provTask\n.\nTaskProgress\n}\n \nelse\n \n{\n0\n}}\n \ncatch\n \n{}\n\n\n\n44\n.\n \nWrite-Progress\n \n-activity\n \nCreating Machines:\n \n-status\n \n$totalPercent% Complete:\n \n-percentcomplete\n \n$totalPercent\n\n\n\n45\n.\n \nsleep\n \n5\n\n\n\n46\n.\n \n$ProvTask\n \n=\n \nget-provTask\n \n-TaskID\n \n$provVMTaskID\n \n-AdminAddress\n \n$adminAddress\n\n\n\n47\n.\n \n}\n\n\n\n48\n.\n \nwrite-host\n \nVM Creation Finished\n\n\n\n49\n.\n \n# Lock the VMs and add them to the broker Catalog\n\n\n\n50\n.\n \n$provisionedVMs\n \n=\n \nget-ProvVM\n \n-ProvisioningSchemeUID\n\n\n$provScheme\n.\nProvisioningSchemeUID\n \n-AdminAddress\n \n$adminAddress\n\n\n\n51\n.\n \n$provisionedVMs\n \n|\n \nLock-ProvVM\n \n-ProvisioningSchemeUID\n \n$provScheme\n.\nProvisioningSchemeUID\n \n\n-Tag\n \nBrokered\n \n-LoggingId\n \n$loggingId\n \n-AdminAddress\n \n$adminAddress\n\n\n\n52\n.\n \n$provisionedVMs\n \n|\n \nForEach\n-Object\n \n{\nNew-BrokerMachine\n \n-CatalogUid\n \n$catalog\n.\nUID\n \n-HostedMachineId\n \n$_\n.\nVMId\n\n\n\n-HypervisorConnectionUid\n \n$brokerHypConnection\n.\nUID\n \n-MachineName\n \n$_\n.\nADAccountSid\n \n-LoggingId\n \n$loggingId\n \n-AdminAddress\n \n$adminAddress\n}\n\n\n\n53\n.\n \nStop-LogHighLevelOperation\n \n-IsSuccessful\n \n$true\n \n-HighLevelOperationId\n \n$loggingId\n \n-AdminAddress\n \n$adminAddress", 
            "title": "Example Create a catalog"
        }, 
        {
            "location": "/example1/#example-create-a-catalog", 
            "text": "The following example shows how to create a catalog for a set of Machine Creation Services\n(MCS) machines.  Before you begin, make sure you follow the steps detailed in  Get started with the\nSDK .  This document tells you how to use Studio to perform the operation you want to script (in this case, to create a catalog for a set of Machine Creation Services machines) and collect the log of SDK operations that Studio made to perform the task. This output can then be customized to produce a script for automating catalog creation.  Note:  To ensure you always get the latest enhancements and fixes, Citrix recommends you\nfollow the procedure described in this document, rather than copying and pasting the example script. Line numbers and line breaks have been added to the script for readability.  Understand the script  The following section explains what each part of the script produced by Studio is doing. This\nwill help you with the customization of your own script. Line numbers have been added for readability.  1 .   Start-LogHighLevelOperation   -AdminAddress  ddc.dumdev.internal.citrix.com:80   -Source   Studio   -StartTime   29 / 05 / 2013   14 : 43 : 08   -Text   Create Machine Catalog ` ExampleMachines `   Starts a logged operation and returns a log ID which is supplied to subsequent\noperations to associate them with the larger task.  2 .   New-BrokerCatalog  -AdminAddress   ddc.dumdev.internal.citrix.com:80   -AllocationType   Permanent   -Description   Example Machines   -IsRemotePC   $False   -LoggingId  f39a2792 - 064a - 43eb - 97c7 - 397cc1238e46   -MinimumFunctionalLevel   L7   -Name   ExampleMachines   -PersistUserChanges   OnPvd   -ProvisioningType   MCS   -Scope   @()   -SessionSupport   SingleSession   Creates a Broker\ncatalog. This catalog is populated with machines which are about to be\ncreated.  3 .   New-AcctIdentityPool   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -AllowUnicode   -Domain   dumdev.internal.citrix.com  \n    -IdentityPoolName   ExampleMachines   -LoggingId   f39a2792 - 064a - 43eb - 97c7 - 397cc1238e46   -NamingScheme   Example-####   -NamingSchemeType   Numeric  \n    -OU   OU=DUMVMs,DC=dumdev,DC=internal,DC=citrix,DC=com   -Scope   @()   Creates an Identity Pool. This defines the mechanism for creating AD computer accounts. This\nbecomes a container for AD accounts created for the machines that are to be created.  4 .   Set-BrokerCatalogMetadata   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -CatalogId   1   -LoggingId   f39a2792 - 064a - 43eb - 97c7 - 397cc1238e46   -Name  Citrix_DesktopStudio_IdentityPoolUid   -Value   b99aee6d-8772-4dbc-978b-8eb9a26e2407   Sets metadata on the Broker catalog with details of the Identity Pool. This is not essential.  5 .   Test-ProvSchemeNameAvailable   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -ProvisioningSchemeName   @( ExampleMachines )   Checks that the requested name is available. This is not essential.  6 .   New-ProvScheme   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -CleanOnBoot   -HostingUnitName   SharedNFS   -IdentityPoolName   ExampleMachines   -LoggingId  f39a2792 - 064a - 43eb - 97c7 - 397cc1238e46   -MasterImageVM   XDHyp:\\hostingunits\\SharedNFS\\BaseVM.vm\\Base OS,  domain joined and activated.snapshot \\Pre-reqs installed.snapshot\\\\Updates Applied.snapshot\\VDA75-no agent.snapshot\\Updated Agent.snapshot   -NetworkMapping   @{ 0 = xdhyp:\\hostingunits\\SharedNFS\\Network0.network }   -PersonalVDiskDriveLetter   P   -PersonalVDiskDriveSize   10   -ProvisioningSchemeName   ExampleMachines   -RunAsynchronously   -Scope   @()   -UsePersonalVDiskStorage   -VMCpuCount   1   -VMMemoryMB   1024   Creates a provisioning scheme object. This is a template for the machines that are to be created. It specifies the hypervisor, network, storage, memory, number of CPUs to be used etc. It takes parameters from the system already set up, such as the HostingUnit name and the path to the VM snapshot to be used for the machines to be created. This command makes a 'consolidated' copy of the VM snapshot being used and, as a result, the process can take time to complete.  In this example, the Studio script specified the -RunAsyncronous flag on this command. This means the command will return control to the administrator before it has completed, so you must wait for it to finish before performing any operations that require it to be complete. If this flag is not specified, the command runs synchronously in-line and control is not returned until the command completes (successfully or otherwise). You can check the status of an asynchronous task using the Get-ProvTask cmdlet. Supply the task ID returned from the operation that started the task; in this case, the New-ProvScheme cmdlet.  7 .   Set-BrokerCatalog   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -LoggingId   f39a2792 - 064a - 43eb - 97c7 - 397cc1238e46   -Name   ExampleMachines  \n    -ProvisioningSchemeId   76125e3a - 9001 - 4993 - 86b6-eefc85c87880   Updates the BrokerCatalog with the unique Id of the provisioning scheme created above.  8 .   Add-ProvSchemeControllerAddress   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -ControllerAddress   @( DDC.dumdev.internal.citrix.com )   -LoggingId   f39a2792 - 064a - 43eb - 97c7 - 397cc1238e46   -ProvisioningSchemeName   ExampleMachines   Adds a set of controller addresses to the provisioning scheme object. This is a list of addresses that the machines created can use to register with a Controller (broker) when deployed. The machines' registration addresses can be supplied in many ways; however, this information is required if the administrator wants to use the 'Allow Machine Creation Service to supply this' in the VDA installer. Changes to this list affect only machines created after the change, not existing machines.  9 .   Get-AcctADAccount   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -IdentityPoolUid   b99aee6d - 8772 - 4dbc - 978b - 8eb9a26e2407   -Lock   $False   -MaxRecordCount   2147483647   -State   Available   Studio gets a list of available Machine Identities from the Identity Pool so that, if existing accounts have been created in the past but are unused, these can be consumed instead of creating new accounts. Note that this is not required in a script because new accounts can be created instead, provided the script is running in a context that has permissions to do this. However, if the script does not have permissions to create accounts, change the script to consume available accounts (a separate process will be required to provide a pool of accounts into the Identity Pool, before running the script).  10 .   New-AcctADAccount   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -Count   2   -IdentityPoolUid   b99aee6d - 8772 - 4dbc - 978b - 8eb9a26e2407   -LoggingId  f39a2792 - 064a - 43eb - 97c7 - 397cc1238e46   Creates the required AD computer accounts in Active Directory. The script creates one account\nbut, if required, it can create more using the 'Count' parameter of the command. The accounts are created into the OU defined in the provisioning scheme created above.  11 .   New-ProvVM   -ADAccountName   @( DUMDEV\\Example-0001\\$ , DUMDEV\\Example-0002\\$ )   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -LoggingId  f39a2792 - 064a - 43eb - 97c7 - 397cc1238e46   -ProvisioningSchemeName   ExampleMachines   -RunAsynchronously   Creates virtual machines, based on the template definition in the provisioning scheme\ncreated above. This process may take time to complete.  12 .   Lock-ProvVM   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -LoggingId   f39a2792 - 064a - 43eb - 97c7 - 397cc1238e46  \n     -ProvisioningSchemeName   ExampleMachines   -Tag   Brokered   -VMID   @( 0710bb77-d01f-d006-4d67-5472e5cd349f )   Locks the provisioned virtual machines and prevents accidental modification of the virtual\nmachine. Consumers of the SDK can use this to indicate that the virtual machine is in use and why it is locked. The script locks the VM with a tag of 'Brokered' to indicate the virtual machine is created and added to a Broker catalog and must not be deleted without first being removed from the catalog. You can set the Tag name to whatever is required.  13 .   New-BrokerMachine   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -CatalogUid   1   -HostedMachineId   0710bb77-d01f-d006-4d67-5472e5cd349f   -HypervisorConnectionUid   1  -LoggingId   f39a2792 - 064a - 43eb - 97c7 - 397cc1238e46   -MachineName   S-1-5-21-3918710733-2340574387-1999698698-109114   Creates a Broker Machine object. These are objects stored in the catalog which join the\nprovisioned machine with the catalog.  14 .   Start-BrokerMachinePvdImagePrepare   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -InputObject   @( 2 )   -LoggingId   f39a2792 - 064a - 43eb - 97c7 - 397cc1238e46   Requests the Broker Service to initiate a preparation operation for Personal vDisk. This is required to allow the machine to initialize the storage for Personal vDisk.  15 .   Stop-LogHighLevelOperation   -AdminAddress   ddc.dumdev.internal.citrix.com:80   -HighLevelOperationId   f39a2792 - 064a - 43eb - 97c7 - 397cc1238e46   -IsSuccessful   $true   Stops the logged operation begun in the first step and indicates it was successful.  Customize the script  The following section shows how to convert and adapt the Studio output into a script that is\nmore consumable. In addition to using variables and removing commands that are not required, it shows how to add machine creation into a loop so that you can control the number of machines created. Line numbers have been added for readability.  1 [ CmdletBinding ()]  param  (  [ Parameter ( Mandatory = $true )]   [string]   $hostingUnitPath ,  [ Parameter ( Mandatory = $true )]   [string]   $catalogName ,  [string]   $catalogDescription ,  [ Parameter ( Mandatory = $true )]   [int]   $numVmsToCreate ,  [string]   $adminAddress ,  [ Parameter ( Mandatory = $true )]   [string]   $namingScheme ,  [string]   $OU ,  [ Parameter ( Mandatory = $true )]   [string]   $domain ,  [ Parameter ( Mandatory = $true )]   [string]   $masterImagePath  )  2 .   Set-HypAdminConnection   -AdminAddress   $adminAddress  3 .   $hostingUnit   =   get-item   $hostingUnitPath  4 .   $hostConnection   =   $hostingUnit . hypervisorConnection  5 .   $brokerHypConnection   =   Get-BrokerHypervisorConnection   -HypHypervisorConnectionUid   $hostConnection . HypervisorConnectionUid  6 .   # Start logged operation  7 .   $loggingOp   =   Start-LogHighLevelOperation   -AdminAddress   $adminAddress   -Source   Scripted   -Text   Create Machine Catalog  ` $catalogName `  8 .   $loggingId   =   $loggingOp . Id  9 .   # Create the broker catalog and the AD Identity account pool  10 .   $catalog   =   New-BrokerCatalog   -AllocationType   Permanent   -Description   $catalogDescription   -IsRemotePC   $False  -MinimumFunctionalLevel   L7   -Name   $catalogName   -PersistUserChanges  OnPvd   -ProvisioningType   MCS   -Scope   @()   -SessionSupport   SingleSession   -LoggingId   $loggingId   -AdminAddress  $adminAddress  11 .   $adPool   =   New-AcctIdentityPool   -IdentityPoolName   $catalogName  -NamingScheme   $namingScheme  -NamingSchemeType   Numeric   -OU   $OU   -Domain   $domain   -AllowUnicode  -LoggingId   $loggingId   -AdminAddress   $adminAddress  12 .   Set-BrokerCatalogMetadata   -CatalogId   $catalog . Uid   -Name  Citrix_DesktopStudio_IdentityPoolUid   -Value   $adPool . IdentityPoolUid   -LoggingId   $loggingId   -AdminAddress  $adminAddress  13 .   ###################################################################  14 .   #create the ProvisioningScheme and wait for it to complete (reporting progress)  15 .   $provSchemeTaskID   =   New-ProvScheme   -ProvisioningSchemeName  $catalogName   -HostingUnitUID   $hostingUnit . HostingUnitUID  -IdentityPoolUID   $adpool . IdentityPoolUid   -CleanOnBoot   -MasterImageVM  $masterImagePath   -UsePersonalVDiskStorage  -PersonalVDiskDriveLetter   P   -PersonalVDiskDriveSize   10   -RunAsynchronously   -LoggingId   $loggingId   -AdminAddress   $adminAddress  16 .   $ProvTask   =   get-provTask   -TaskID   $provSchemeTaskID   -AdminAddress   $adminAddress  17 .   $taskProgress   =   0  18 .   write-host   Creating New ProvScheme  19 .   while   ( $provTask . Active   -eq   $true )  20 .   {  21 .   # catch an uninitialized task progress, this occurs until the product initialized the value  22 .   try   { $totalPercent   =   if   ( $provTask . TaskProgress ){ $provTask . TaskProgress }   else   { 0 }}   catch   {}  23 .   Write-Progress   -activity   Creating Provisioning Scheme:   -status   $totalPercent% Complete:   -percentcomplete   $totalPercent  24 .   sleep   30  25 .   $ProvTask   =   get-provTask   -TaskID   $provSchemeTaskID   -AdminAddress   $adminAddress  26 .   }  27 .   write-host   New ProvScheme Creation Finished  28 .   $provScheme   =   get-provScheme   -ProvisioningSchemeUID   $provTask . ProvisioningSchemeUid  29 .   $controllers   =   Get-BrokerController   |   select   DNSName  30 .   Add-ProvSchemeControllerAddress   -ProvisioningSchemeUID   $provScheme . ProvisioningSchemeUID   -ControllerAddress   $controllers   -LoggingId   $loggingId   -AdminAddress   $adminAddress  31 .   ###################################################################  32 .   # Set the provisioning scheme id for the broker catalog  33 .   Set-BrokerCatalog   -InputObject   $catalog   -ProvisioningSchemeId   $provTask . ProvisioningSchemeUid   -LoggingId   $loggingId   -AdminAddress   $adminAddress  34 .   ###################################################################  35 .   # create the AD accounts required and then create the Virtual machines (reporting progress)  36 .   $accts   =   New-AcctADAccount   -IdentityPoolUid   $adPool . IdentityPoolUid   -Count   $numVMsToCreate   -LoggingId   $loggingId   -AdminAddress   $adminAddress  37 .   $provVMTaskID   =   New-ProvVM   -ProvisioningSchemeUID   $provScheme . ProvisioningSchemeUID  -ADAccountName   $accts . SuccessfulAccounts   -RunAsynchronously   -LoggingId   $loggingId   -AdminAddress   $adminAddress  38 .   # wait for the VMS to finish Provisioning  39 .   $ProvTask   =   get-provTask   -TaskID   $provVMTaskID   -AdminAddress   $adminAddress  40 .   while   ( $provTask . Active   -eq   $true )  41 .   {  42 .   # catch an uninitialized task progress, this occurs until the product initialized the value  43 .   try   { $totalPercent   =   if   ( $provTask . TaskProgress ){ $provTask . TaskProgress }   else   { 0 }}   catch   {}  44 .   Write-Progress   -activity   Creating Machines:   -status   $totalPercent% Complete:   -percentcomplete   $totalPercent  45 .   sleep   5  46 .   $ProvTask   =   get-provTask   -TaskID   $provVMTaskID   -AdminAddress   $adminAddress  47 .   }  48 .   write-host   VM Creation Finished  49 .   # Lock the VMs and add them to the broker Catalog  50 .   $provisionedVMs   =   get-ProvVM   -ProvisioningSchemeUID  $provScheme . ProvisioningSchemeUID   -AdminAddress   $adminAddress  51 .   $provisionedVMs   |   Lock-ProvVM   -ProvisioningSchemeUID   $provScheme . ProvisioningSchemeUID   -Tag   Brokered   -LoggingId   $loggingId   -AdminAddress   $adminAddress  52 .   $provisionedVMs   |   ForEach -Object   { New-BrokerMachine   -CatalogUid   $catalog . UID   -HostedMachineId   $_ . VMId  -HypervisorConnectionUid   $brokerHypConnection . UID   -MachineName   $_ . ADAccountSid   -LoggingId   $loggingId   -AdminAddress   $adminAddress }  53 .   Stop-LogHighLevelOperation   -IsSuccessful   $true   -HighLevelOperationId   $loggingId   -AdminAddress   $adminAddress", 
            "title": "Example: Create a catalog"
        }, 
        {
            "location": "/example2/", 
            "text": "Example: Create and configure a host\n\n\nThe following example shows how to create and configure a host.\n\n\nBefore you begin, make sure you follow the steps detailed in \nGet started with the SDK\n, which tells you how to use Studio to perform the operation you want to script (in this case, to create a host) and collect the log of SDK operations that Studio made to perform the task. This output can then be customized to produce a script for automating host creation.\n\n\nNote:\n To ensure you always get the latest enhancements and fixes, Citrix recommends you follow the procedure described in this document, rather than copying and pasting the example script. Line numbers and line breaks have been added to the script for readability.\n\n\nUnderstand the script\n\n\nThe following section explains what each part of the script produced by Studio is doing. This will help you with the customization of your own script. Line numbers have been added for readability.\n\n\n1\n.\n \nGet-LogSite\n \n-AdminAddress\n \nmycontroller.example.com:80\n\n\n\n\n\n\nQueries the configuration logging service to retrieve information about the site\nconfiguration.\n\n\n2\n.\n \nStart-LogHighLevelOperation\n \n-AdminAddress\n \nmycontroller.example.com:80\n\n\n-Source\n \nStudio\n \n-StartTime\n \n14\n/\n08\n/\n2013\n \n14\n:\n30\n:\n28\n \n-Text\n \nCreate Connection `\nExample\n \nXenServer\n`\n\n\n\n\n\n\nStarts a high-level logging operation with the configuration logging operation within which the rest of the commands will exist. Returns a log ID which is supplied to subsequent operations.\n\n\n3\n.\n \nSet-HypAdminConnection\n \n-AdminAddress\n \nmycontroller.example.com:80\n \n\n\n\n\n\nSets the location of the Host Service that will be used by the configuration cmdlets. Because the Host Service exposes a PowerShell provider, not all of the cmdlets can take an address for the service so this cmdlet sets a default location.\n\n\n4\n.\n \nNew-Item\n \n-ConnectionType\n \nXenServer\n \n-HypervisorAddress\n \n@(\nhttp://xenhost1.example.com\n)\n \n-LoggingId\n \ne355ce51\n-\n8cbb\n-\n400a-ae81\n-\n1fdc567239cb\n \n-Path\n \n@(\nXDHyp:\\Connections\\Example XenServer\n)\n \n-Scope\n \n@()\n \n-Password\n \n********\n \n-UserName\n \nroot\n\n\n\n\n\n\nCreates a connection to a XenServer (xenhost1.example.com). This is a non-persistent connection\nand is available only to this PowerShell runspace.\n\n\n5\n.\n \nStop-LogHighLevelOperation\n \n-AdminAddress\n \nmycontroller.example.com:80\n \n-EndTime\n \n14\n/\n08\n/\n2013\n \n14\n:\n30\n:\n29\n \n-HighLevelOperationId\n \ne355ce51-8cbb-400a-ae81-1fdc567239cb\n \n-IsSuccessful\n \n$True\n\n\n\n\n\n\nStops the logged operation begun previously and indicates it was successful.\n\n\n6\n.\n \nGet-LogSite\n \n-AdminAddress\n \nmycontroller.example.com:80\n\n\n\n\n\n\nQueries the configuration logging service to retrieve information about the site configuration.\n\n\n7\n.\n \nStart-LogHighLevelOperation\n \n-AdminAddress\n \nmycontroller.example.com:80\n \n-Source\n \nStudio\n \n-StartTime\n \n14\n/\n08\n/\n2013\n \n14\n:\n30\n:\n30\n \n-Text\n \nUpdate Connection `\nExample\n \nXenServer\n`\n\n\n\n\n\n\nStarts a new high-level logging operation.\n\n\n8\n.\n \nSet-HypAdminConnection\n \n-AdminAddress\n \nmycontroller.example.com:80\n\n\n\n\n\n\nSets the Host Service address details again (note that this repetition is removed in the optimized script below).\n\n\n9\n.\n \nSet-Item\n \n-HypervisorAddress\n \n@(\nhttp://xenhost1.example.com\n,\nhttp://xenhost2.example.com\n)\n \n-LoggingId\n \n44e15629\n-\n6906\n-\n4840-a36c\n-\n984aaf67be6d\n \n-PassThru\n \n-Path\n \n@(\nXDHyp:\\\\Connections\\\\Example XenServer\n)\n \n-Password\n \n********\n \n-UserName\n \nroot\n\n\n\n\n\n\nUpdates the connection created in step 4. Because there is more than one XenServer in the pool, it supplies all the addresses to enable High Availability.\n\n\n10\n.\n \nStop-LogHighLevelOperation\n \n-AdminAddress\n \nmycontroller.example.com:80\n \n-EndTime\n \n14\n/\n08\n/\n2013\n \n14\n:\n30\n:\n31\n \n-HighLevelOperationId\n \n44e15629-6906-4840-a36c-984aaf67be6d\n \n-IsSuccessful\n \n\\\n$True\n\n\n\n\n\n\nStops the logging operation begun in step 7.\n\n\n11\n.\n \nGet-LogSite\n \n-AdminAddress\n \nmycontroller.example.com:80\n\n\n\n\n\n\nQueries the configuration logging service to retrieve information about the site configuration.\n\n\n12\n.\n \nStart-LogHighLevelOperation\n \n-AdminAddress\n \nmycontroller.example.com:80\n \n-Source\n \nStudio\n\n\n-StartTime\n \n14\n/\n08\n/\n2013\n \n14\n:\n31\n:\n03\n \n-Text\n \nCreate Resources `\nExample\n \nResources\n`\n \nand\n \nPersist\n \nConnection\n \n`\nExample\n \nXenServer\n`\n\n\n\n\n\n\nStarts a new logging operation.\n\n\n13\n.\n \nSet-HypAdminConnection\n \n-AdminAddress\n \nmycontroller.example.com:80\n\n\n\n\n\n\nSets the Host Service address details again.\n\n\n14\n.\n \nGet-ChildItem\n \n-Path\n \n@(\nXDHyp:\\Connections\n)\n\n\n\n\n\n\nGets the contents of the host connection to populate the wizard dialogs.\n\n\n15\n.\n \nSet-HypAdminConnection\n \n-AdminAddress\n \nmycontroller.example.com:80\n\n\n\n\n\n\nSets the Host Service address details again.\n\n\n16\n.\n \nRemove-Item\n \n-LoggingId\n \n76caa3f4-df93\n-\n4cb2-b78d\n-\n6a8824766314\n \n-Path\n \n@(\nXDHyp:\\Connections\\Example XenServer\n)\n\n\n\n\n\n\nRemoves the temporary connection created in the wizard.\n\n\n17\n.\n \nSet-HypAdminConnection\n \n-AdminAddress\n \nmycontroller.example.com:80\n\n\n\n\n\n\nSets the Host Service address details again.\n\n\n18\n.\n \nNew-Item\n \n-ConnectionType\n \nXenServer\n \n-HypervisorAddress\n \n@(\nhttp://xenhost1.example.com\n,\nhttp://xenhost2.example.com\n)\n \n-LoggingId\n \n76caa3f4-df93\n-\n4cb2-b78d\n-\n6a8824766314\n \n-Path\n \n@(\nXDHyp:\\\\Connections\\\\Example XenServer\n)\n \n-Persist\n \n-Scope\n \n@()\n \n-Password\n \n********\n \n-UserName\n \nroot\n\n\n\n\n\n\nRecreates the connection as a persistent connection which is written to the database and available to other PowerShell runspaces.\n\n\n19\n.\n \nNew-BrokerHypervisorConnection\n \n-AdminAddress\n \nmycontroller.example.com:80\n \n-HypHypervisorConnectionUid\n \na14096ba\n-\n5074\n-\n44ff-b596\n-\n371e345c0449\n \n-LoggingId\n \n76caa3f4-df93\n-\n4cb2-b78d\n-\n6a8824766314\n\n\n\n\n\n\nAdds the host connection to the Broker Service.\n\n\n20\n.\n \nSet-HypAdminConnection\n \n-AdminAddress\n \nmycontroller.example.com:80\n\n\n\n\n\n\nSets the Host Service address details again.\n\n\n21\n.\n \nNew-Item\n \n-HypervisorConnectionName\n \nExample XenServer\n \n-LoggingId\n \n76caa3f4-df93\n-\n4cb2-b78d\n-\n6a8824766314\n \n-NetworkPath\n \n@(\nXDHyp:\\Connections\\Example XenServer\\Network0.network\n)\n \n-Path\n \n@(\nXDHyp:\\HostingUnits\\Example Resources\n)\n \n-PersonalvDiskStoragePath\n \n@(\nXDHyp:\\Connections\\Example XenServer\\PvdStorage.storage\n)\n \n-RootPath\n \nXDHyp:\\Connections\\Example XenServer\n \n-StoragePath\n\n\n@(\nXDHyp:\\Connections\\Example XenServer\\Primary OS.storage\n)\n\n\n\n\n\n\nCreates the HostingUnit (referred to as Resources in Studio) using the information gathered in\nstep 14.\n\n\n22\n.\n \nSet-HypAdminConnection\n \n-AdminAddress\n \nmycontroller.example.com:80\n\n\n\n\n\n\nSets the Host Service address details again.\n\n\n23\n.\n \nGet-Item\n \n-Path\n \n@(\nXDHyp:\\Connections\\Example XenServer\n)\n\n\n\n\n\n\nRetrieves the newly created object.\n\n\nStop-LogHighLevelOperation\n \n-AdminAddress\n \nmycontroller.example.com:80\n \n-EndTime\n \n14\n/\n08\n/\n2013\n \n14\n:\n31\n:\n07\n \n-HighLevelOperationId\n \n76caa3f4-df93-4cb2-b78d-6a8824766314\n \n-IsSuccessful\n \n$True\n\n\n\n\n\n\nStops the logged operation begun previously and indicates if it was successful.\n\n\nCustomize the script\n\n\nThe following section shows how to convert and adapt the Studio output into a script that is more consumable. The following script has been simplified so that, instead of creating a temporary host connection in the process of acquiring information in the wizards as in the Studio script above, a persistent connection is created. Information is then queried from within this to create the HostingUnit (Resources). Note that the LoggingId and HypHyperConnectionUid details are different.\n\n\nLine numbers have been added for readability; each numbered item is a single PowerShell command.\n\n\n1\n.\n \nStart-LogHighLevelOperation\n \n-AdminAddress\n \nmycontroller.example.com:80\n \n-Source\n \nStudio\n \n-Text\n \nCreate Connection \\`\nExample\n \nXenServer\n\\`\n\n\n\n2. Set-HypAdminConnection -AdminAddress \nmycontroller\n.\nexample\n.\ncom\n:\n80\n\n\n\n3. New-Item -ConnectionType \nXenServer\n -HypervisorAddress @(\nhttp\n:\n//\nxenhost1\n.\nexample\n.\ncom\n,\nhttp\n:\n//\nxenhost2\n.\nexample\n.\ncom\n)-LoggingId\n\n\n76caa3f4-df93-4cb2-b78d-6a8824766314 -Path @(\nXDHyp\n:\n\\\\\nConnections\n\\\\\nExample\n \nXenServer\n) -Persist -Scope @() -Password \\*\\*\\*\\*\\*\\*\\*\\* -UserName \nroot\n\n\n\n4. Get-ChildItem -Path @(\nXDHyp\n:\n\\\nConnections\n)\n\n\n\n5. New-BrokerHypervisorConnection -AdminAddress \nmycontroller\n.\nexample\n.\ncom\n:\n80\n -HypHypervisorConnectionUid a14096ba-5074-44ff-b596-371e345c0449 -LoggingId\n\n\n76caa3f4-df93-4cb2-b78d-6a8824766314\n\n\n\n6. New-Item -HypervisorConnectionName \nExample\n \nXenServer\n -LoggingId\n\n\n76caa3f4-df93-4cb2-b78d-6a8824766314 -NetworkPath @(\nXDHyp\n:\n\\\nConnections\n\\\nExample\n \nXenServer\n\\\nNetwork\n\n\n0\n.\nnetwork\n) -Path @(\nXDHyp\n:\n\\\nHostingUnits\n\\\nExample\n \nResources\n) -PersonalvDiskStoragePath @(\nXDHyp\n:\n\\\nConnections\n\\\nExample\n \nXenServer\n\\\nPvd\n \nStorage\n.\nstorage\n) -RootPath \nXDHyp\n:\n\\\nConnections\n\\\nExample\n \nXenServer\n -StoragePath @(\nXDHyp\n:\n\\\nConnections\n\\\nExample\n \nXenServer\n\\\nPrimaryOS\n.\nstorage\n)\n\n\n\n7. Stop-LogHighLevelOperation -AdminAddress \nmycontroller\n.\nexample\n.\ncom\n:\n80\n -HighLevelOperationId \n76caa3f4-df93\n-\n4cb2-b78d\n-\n6a8824766314\n \n-IsSuccessful\n \n$True", 
            "title": "Example Create and configure a host"
        }, 
        {
            "location": "/example2/#example-create-and-configure-a-host", 
            "text": "The following example shows how to create and configure a host.  Before you begin, make sure you follow the steps detailed in  Get started with the SDK , which tells you how to use Studio to perform the operation you want to script (in this case, to create a host) and collect the log of SDK operations that Studio made to perform the task. This output can then be customized to produce a script for automating host creation.  Note:  To ensure you always get the latest enhancements and fixes, Citrix recommends you follow the procedure described in this document, rather than copying and pasting the example script. Line numbers and line breaks have been added to the script for readability.  Understand the script  The following section explains what each part of the script produced by Studio is doing. This will help you with the customization of your own script. Line numbers have been added for readability.  1 .   Get-LogSite   -AdminAddress   mycontroller.example.com:80   Queries the configuration logging service to retrieve information about the site\nconfiguration.  2 .   Start-LogHighLevelOperation   -AdminAddress   mycontroller.example.com:80  -Source   Studio   -StartTime   14 / 08 / 2013   14 : 30 : 28   -Text   Create Connection ` Example   XenServer `   Starts a high-level logging operation with the configuration logging operation within which the rest of the commands will exist. Returns a log ID which is supplied to subsequent operations.  3 .   Set-HypAdminConnection   -AdminAddress   mycontroller.example.com:80    Sets the location of the Host Service that will be used by the configuration cmdlets. Because the Host Service exposes a PowerShell provider, not all of the cmdlets can take an address for the service so this cmdlet sets a default location.  4 .   New-Item   -ConnectionType   XenServer   -HypervisorAddress   @( http://xenhost1.example.com )   -LoggingId   e355ce51 - 8cbb - 400a-ae81 - 1fdc567239cb   -Path   @( XDHyp:\\Connections\\Example XenServer )   -Scope   @()   -Password   ********   -UserName   root   Creates a connection to a XenServer (xenhost1.example.com). This is a non-persistent connection\nand is available only to this PowerShell runspace.  5 .   Stop-LogHighLevelOperation   -AdminAddress   mycontroller.example.com:80   -EndTime   14 / 08 / 2013   14 : 30 : 29   -HighLevelOperationId   e355ce51-8cbb-400a-ae81-1fdc567239cb   -IsSuccessful   $True   Stops the logged operation begun previously and indicates it was successful.  6 .   Get-LogSite   -AdminAddress   mycontroller.example.com:80   Queries the configuration logging service to retrieve information about the site configuration.  7 .   Start-LogHighLevelOperation   -AdminAddress   mycontroller.example.com:80   -Source   Studio   -StartTime   14 / 08 / 2013   14 : 30 : 30   -Text   Update Connection ` Example   XenServer `   Starts a new high-level logging operation.  8 .   Set-HypAdminConnection   -AdminAddress   mycontroller.example.com:80   Sets the Host Service address details again (note that this repetition is removed in the optimized script below).  9 .   Set-Item   -HypervisorAddress   @( http://xenhost1.example.com , http://xenhost2.example.com )   -LoggingId   44e15629 - 6906 - 4840-a36c - 984aaf67be6d   -PassThru   -Path   @( XDHyp:\\\\Connections\\\\Example XenServer )   -Password   ********   -UserName   root   Updates the connection created in step 4. Because there is more than one XenServer in the pool, it supplies all the addresses to enable High Availability.  10 .   Stop-LogHighLevelOperation   -AdminAddress   mycontroller.example.com:80   -EndTime   14 / 08 / 2013   14 : 30 : 31   -HighLevelOperationId   44e15629-6906-4840-a36c-984aaf67be6d   -IsSuccessful   \\ $True   Stops the logging operation begun in step 7.  11 .   Get-LogSite   -AdminAddress   mycontroller.example.com:80   Queries the configuration logging service to retrieve information about the site configuration.  12 .   Start-LogHighLevelOperation   -AdminAddress   mycontroller.example.com:80   -Source   Studio  -StartTime   14 / 08 / 2013   14 : 31 : 03   -Text   Create Resources ` Example   Resources `   and   Persist   Connection   ` Example   XenServer `   Starts a new logging operation.  13 .   Set-HypAdminConnection   -AdminAddress   mycontroller.example.com:80   Sets the Host Service address details again.  14 .   Get-ChildItem   -Path   @( XDHyp:\\Connections )   Gets the contents of the host connection to populate the wizard dialogs.  15 .   Set-HypAdminConnection   -AdminAddress   mycontroller.example.com:80   Sets the Host Service address details again.  16 .   Remove-Item   -LoggingId   76caa3f4-df93 - 4cb2-b78d - 6a8824766314   -Path   @( XDHyp:\\Connections\\Example XenServer )   Removes the temporary connection created in the wizard.  17 .   Set-HypAdminConnection   -AdminAddress   mycontroller.example.com:80   Sets the Host Service address details again.  18 .   New-Item   -ConnectionType   XenServer   -HypervisorAddress   @( http://xenhost1.example.com , http://xenhost2.example.com )   -LoggingId   76caa3f4-df93 - 4cb2-b78d - 6a8824766314   -Path   @( XDHyp:\\\\Connections\\\\Example XenServer )   -Persist   -Scope   @()   -Password   ********   -UserName   root   Recreates the connection as a persistent connection which is written to the database and available to other PowerShell runspaces.  19 .   New-BrokerHypervisorConnection   -AdminAddress   mycontroller.example.com:80   -HypHypervisorConnectionUid   a14096ba - 5074 - 44ff-b596 - 371e345c0449   -LoggingId   76caa3f4-df93 - 4cb2-b78d - 6a8824766314   Adds the host connection to the Broker Service.  20 .   Set-HypAdminConnection   -AdminAddress   mycontroller.example.com:80   Sets the Host Service address details again.  21 .   New-Item   -HypervisorConnectionName   Example XenServer   -LoggingId   76caa3f4-df93 - 4cb2-b78d - 6a8824766314   -NetworkPath   @( XDHyp:\\Connections\\Example XenServer\\Network0.network )   -Path   @( XDHyp:\\HostingUnits\\Example Resources )   -PersonalvDiskStoragePath   @( XDHyp:\\Connections\\Example XenServer\\PvdStorage.storage )   -RootPath   XDHyp:\\Connections\\Example XenServer   -StoragePath  @( XDHyp:\\Connections\\Example XenServer\\Primary OS.storage )   Creates the HostingUnit (referred to as Resources in Studio) using the information gathered in\nstep 14.  22 .   Set-HypAdminConnection   -AdminAddress   mycontroller.example.com:80   Sets the Host Service address details again.  23 .   Get-Item   -Path   @( XDHyp:\\Connections\\Example XenServer )   Retrieves the newly created object.  Stop-LogHighLevelOperation   -AdminAddress   mycontroller.example.com:80   -EndTime   14 / 08 / 2013   14 : 31 : 07   -HighLevelOperationId   76caa3f4-df93-4cb2-b78d-6a8824766314   -IsSuccessful   $True   Stops the logged operation begun previously and indicates if it was successful.  Customize the script  The following section shows how to convert and adapt the Studio output into a script that is more consumable. The following script has been simplified so that, instead of creating a temporary host connection in the process of acquiring information in the wizards as in the Studio script above, a persistent connection is created. Information is then queried from within this to create the HostingUnit (Resources). Note that the LoggingId and HypHyperConnectionUid details are different.  Line numbers have been added for readability; each numbered item is a single PowerShell command.  1 .   Start-LogHighLevelOperation   -AdminAddress   mycontroller.example.com:80   -Source   Studio   -Text   Create Connection \\` Example   XenServer \\`  2. Set-HypAdminConnection -AdminAddress  mycontroller . example . com : 80  3. New-Item -ConnectionType  XenServer  -HypervisorAddress @( http : // xenhost1 . example . com , http : // xenhost2 . example . com )-LoggingId  76caa3f4-df93-4cb2-b78d-6a8824766314 -Path @( XDHyp : \\\\ Connections \\\\ Example   XenServer ) -Persist -Scope @() -Password \\*\\*\\*\\*\\*\\*\\*\\* -UserName  root  4. Get-ChildItem -Path @( XDHyp : \\ Connections )  5. New-BrokerHypervisorConnection -AdminAddress  mycontroller . example . com : 80  -HypHypervisorConnectionUid a14096ba-5074-44ff-b596-371e345c0449 -LoggingId  76caa3f4-df93-4cb2-b78d-6a8824766314  6. New-Item -HypervisorConnectionName  Example   XenServer  -LoggingId  76caa3f4-df93-4cb2-b78d-6a8824766314 -NetworkPath @( XDHyp : \\ Connections \\ Example   XenServer \\ Network  0 . network ) -Path @( XDHyp : \\ HostingUnits \\ Example   Resources ) -PersonalvDiskStoragePath @( XDHyp : \\ Connections \\ Example   XenServer \\ Pvd   Storage . storage ) -RootPath  XDHyp : \\ Connections \\ Example   XenServer  -StoragePath @( XDHyp : \\ Connections \\ Example   XenServer \\ PrimaryOS . storage )  7. Stop-LogHighLevelOperation -AdminAddress  mycontroller . example . com : 80  -HighLevelOperationId  76caa3f4-df93 - 4cb2-b78d - 6a8824766314   -IsSuccessful   $True", 
            "title": "Example: Create and configure a host"
        }, 
        {
            "location": "/example3/", 
            "text": "Example: Create a PvD Desktop\n\n\nThis document provides an example of a script that creates a Delivery Group containing Personal\nvDisk (PvD) desktops.\n\n\nBefore you begin, make sure you follow the steps detailed in \nGet started with the SDK\n, which shows you how to use Studio to perform the operation you want to script and collect the log of SDK operations that Studio made to perform the task. This output can then be customized to produce a script for automating the task.\n\n\nNote:\n To ensure you always get the latest enhancements and fixes, Citrix recommends you\nfollow the procedure described in this document, rather than copying and pasting the example script.\n\n\nUnderstand the script\n\n\nThe following section explains what each part of the script produced by Studio is doing. This will help you with the customization of your own script. Line numbers and line breaks have been added to the script for readability.\n\n\n1. Start-LogHighLevelOperation -AdminAddress \ntest-ddc.mydomain.com:80\n\n-Source \nStudio\n -StartTime 31/07/2013 10:08:58 -Text \nCreate Delivery Group `\nWin7 PvD\nDesktops`\n\n\n\n\n\n\nStarts a logged operation and returns a log ID which is supplied to subsequent operations to associate them with the wider task.\n\n\n2. New-BrokerDesktopGroup -AdminAddress \ntest-ddc.mydomain.com:80\n -ColorDepth \nTwentyFourBit\n -DeliveryType \nDesktopsOnly\n -DesktopKind \nPrivate\n -InMaintenanceMode\n\n\n$\nFalse\n -IsRemotePC \n$\nFalse\n -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99 -MinimumFunctionalLevel \nL7\n -Name \nWin7 PvD Desktops\n -OffPeakBufferSizePercent 10 -PeakBufferSizePercent 10 -PublishedName \nWin7 PvD Desktops\n -Scope @() -SecureIcaRequired \\\n$\nFalse\n -SessionSupport \nSingleSession -ShutdownDesktopsAfterUse \\\n$\nFalse\n -TimeZone \nGMT Standard Time\n\n\n\n\n\n\nCreates a new Delivery Group with options collected by the Studio wizard.\n\n\n3. Add-BrokerMachinesToDesktopGroup -AdminAddress \ntest-ddc.mydomain.com:80\n -Catalog \nwin7-pvd\n -Count 2 -DesktopGroup \nWin7 PvD Desktops\n -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99\n\n\n\n\n\nAdds the number of machines requested from the nominated catalog to the new Delivery Group.\n\n\n4. Set-Variable -Name \nbrokerUsers\n -Value @(\nS-1-5-21-3291547628-200264090-930806513-1104\n,\nS-1-5-21-3291547628-200264090-930806513-1105\n) Get-BrokerUser -AdminAddress \ntest-ddc.mydomain.com:80\n -Filter \n{\n(SID -in \n$\nbrokerUsers\n)} -MaxRecordCount 2147483647 Remove-Variable -Name \nbrokerUsers\n New-BrokerUser -AdminAddress \ntest-ddc.mydomain.com:80\n -Name\n\n\nMYDOMAIN\\user1\n New-BrokerUser -AdminAddress \ntest-ddc.mydomain.com:80\n -Name\n\n\nMYDOMAIN\\user2\n\n\n\n\n\n\nThe above commands are not required, Studio is verifying users.\n\n\n5. Test-BrokerAssignmentPolicyRuleNameAvailable -AdminAddress \ntest-ddc.mydomain.com:80\n -Name @(\nWin7 PvD Desktops\n)\n\n\n\n\n\nStudio checks that the policy assignment name is available to use.\n\n\n6. New-BrokerAssignmentPolicyRule -AdminAddress \ntest-ddc.mydomain.com:80\n -DesktopGroupUid 41 -Enabled \n$\nTrue\n -IncludedUserFilterEnabled \n$\nFalse\n -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99 -MaxDesktops 1 -Name \nWin7 PvD Desktops\n\n\n\n\n\n\nCreate the new policy assignment rule for the Delivery Group. No users are specified here so\nall control is through the access policy rule.\n\n\n7. Set-Variable -Name \nbrokerUsers\n -Value @(\nS-1-5-21-3291547628-200264090-930806513-1104\n,\nS-1-5-21-3291547628-200264090-930806513-1105\n) \n\n\nGet-BrokerUser -AdminAddress \ntest-ddc.mydomain.com:80\n -Filter \n{\n(SID -in \\\n$\nbrokerUsers\n)} -MaxRecordCount 2147483647\n\n\n\nRemove-Variable -Name \nbrokerUsers\n\n\n\nNew-BrokerUser -AdminAddress \ntest-ddc.mydomain.com:80\n -Name \nMYDOMAIN\\\\user1\n\n\n\nNew-BrokerUser -AdminAddress \ntest-ddc.mydomain.com:80\n -Name \nMYDOMAIN\\\\user2\n\n\n\n\n\n\nThe above commands are not required, Studio is performing further checks.\n\n\n8. Test-BrokerAccessPolicyRuleNameAvailable -AdminAddress \ntest-ddc.mydomain.com:80\n -Name @(\nWin7 PvD Desktops\\_Direct\n)\n\n\n\n\n\nStudio tests that the access policy rule name is available to use.\n\n\n9. New-BrokerAccessPolicyRule -AdminAddress \ntest-ddc.mydomain.com:80\n -AllowedConnections \nNotViaAG\n -AllowedProtocols @(\nHDX\n,\nRDP\n) -AllowRestart \n$\nTrue\n -DesktopGroupUid\n\n\n41 -Enabled \\\n$\nTrue\n -IncludedSmartAccessFilterEnabled \n$\nTrue\n -IncludedUserFilterEnabled \n$\nTrue\n -IncludedUsers @(\nMYDOMAIN\\user1\n,\nMYDOMAIN\\user2\n) -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99 -Name \nWin7 PvD Desktops_Direct\n\n\n\n\n\n\nCreates the access policy rule for the new desktop for non-NetScaler Gateway connections.\n\n\n10. Test-BrokerAccessPolicyRuleNameAvailable -AdminAddress \ntest-ddc.mydomain.com:80\n -Name @(\nWin7 PvD Desktops_AG\n) New-BrokerAccessPolicyRule -AdminAddress \ntest-ddc.mydomain.com:80\n -AllowedConnections \nViaAG\n -AllowedProtocols @(\nHDX\n,\nRDP\n) -AllowRestart \n$\nTrue\n -DesktopGroupUid 41 -Enabled \n$\nTrue\n -IncludedSmartAccessFilterEnabled \n$\nTrue\n -IncludedSmartAccessTags @() -IncludedUserFilterEnabled \n$\nTrue\n -IncludedUsers\n\n\n@(\nMYDOMAIN\\user1\n,\nMYDOMAIN\\user2\n) -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99 -Name \nWin7 PvDDesktops_AG\n\n\n\n\n\n\nStudio repeats this process for NetScaler Gateway connections.\n\n\n11. Test-BrokerPowerTimeSchemeNameAvailable -AdminAddress \ntest-ddc.mydomain.com:80\n -Name @(\nWin7 PvD Desktops_Weekdays\n) New-BrokerPowerTimeScheme -AdminAddress \ntest-ddc.mydomain.com:80\n -DaysOfWeek \nWeekdays\n -DesktopGroupUid 41 -DisplayName \nWeekdays\n -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99 -Name \nWin7 PvD Desktops_Weekdays\n -PeakHours @(\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n, \n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n) -PoolSize @(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) Test-BrokerPowerTimeSchemeNameAvailable -AdminAddress \ntest-ddc.mydomain.com:80\n -Name @(\nWin7 PvD Desktops_Weekend\n) New-BrokerPowerTimeScheme -AdminAddress \ntest-ddc.mydomain.com:80\n -DaysOfWeek \nWeekend\n -DesktopGroupUid 41 -DisplayName \nWeekend\n -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99 -Name \nWin7 PvD Desktops_Weekend\n -PeakHours @(\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nTrue\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n,\n$\nFalse\n) -PoolSize @(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)\n\n\n\n\n\n\nStudio checks that the names for the (optional) weekday and weekend power schemes are\navailable, and adds these.\n\n\n12. Stop-LogHighLevelOperation -AdminAddress \ntest-ddc.mydomain.com:80\n -EndTime 31/07/2013 10:09:05 -HighLevelOperationId \n846f2d42-a994-4bce-ab58-be05c8d73b99\n -IsSuccessful \n$\nTrue\n\n\n\n\n\n\nStops the logged operation begun in step 1 and indicates it was successful.\n\n\nCustomize the script\n\n\nThis section shows how to convert and adapt the Studio output into a script that is more consumable.\n\n\nThe script creates a Delivery Group containing PvD desktops. The catalog specified in the parameters must exist already and be populated appropriately (with an allocation type of static and a PvD disk). The script is designed to be run from a Powershell command line logged on as a Citrix administrator. No checks are made for permissions; the script will fail if the user does not have the appropriate permissions.\n\n\nlt;\\\n#\n\n\n\nSample usage:\n\n\n\n.\\CreatePvDGroup.ps1 `\n\n\n\n-GroupName \nWin7 PvD Desktops\n `\n\n\n\n-SrcCatalog \nwin7-pvd\n `\n\n\n\n-NumDesktops 2 `\n\n\n\n-Users @(\nmydomain\\user1\n,\nmydomain\\user2\n) `\n\n\n\n\\\n#\ngt;\n\n\n\nParam(\n\n\n\n[Parameter(Mandatory=\\\n$\ntrue\n)\\] \\[string\\] \\\n$\nGroupName\n,\n\n\n\n\\[Parameter(Mandatory=\\\n$\ntrue\n)\\] \\[string\\] \\\n$\nSrcCatalog\n,\n\n\n\n\\[Parameter(Mandatory=\\\n$\ntrue\n)\\] \\[int\\] \\\n$\nNumDesktops\n,\n\n\n\n\\[Parameter(Mandatory=\\\n$\ntrue\n)\\] \\[array\\] \\\n$\nUsers\n\n\n\n\\[string\\] \\\n$\nAdminAddress\n\n\n\n)\n\n\n\n\n\n\nThe table explains the parameters used in the script.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSrcCatalog\n\n\nThe name of the catalog to be used to create the PvD desktop. Create the catalog by specifying an allocation type of static. Machines must also have PvD disks.\n\n\n\n\n\n\nGroupName\n\n\nThe name of the catalog to be used to create the PvD desktop. Create the catalog by specifying an allocation type of static. Machines must also have PvD disks.\n\n\n\n\n\n\nNumDesktops\n\n\nThe number of machines to add to the PvD desktop group. If insufficient machines are available, as many as possible are added.\n\n\n\n\n\n\nUsers\n\n\nWhich users can access the group. This is a list of users or groups; for example, @('mydomain\\Domain Users') or @('mydomain\\user1','mydomain\\user2')\n\n\n\n\n\n\n\n\nSet-HypAdminConnection\n \n-AdminAddress\n \n$adminAddress\n\n\n\n\n\n\nSpecify the hypervisor admin connection to use. Removes the need for the -AdminAddress for some\nof the commands.\n\n\n$peakPoolSize\n \n=\n \n2\n\n\n\n$weekendPoolSizeByHour\n \n=\n \nnew-object\n \nint\n[]\n \n24\n\n\n\n$weekdayPoolSizeByHour\n \n=\n \nnew-object\n \nint\n[]\n \n24\n\n\n\n9\n..\n17\n \n|\n \n%{\n \n$weekdayPoolSizeByHour\n[\n$_\n]\n \n=\n \n$peakPoolSize\n \n}\n\n\n\n$peakHours\n \n=\n \n(\n0\n..\n23\n \n|\n \n%{\n \n$_\n \n-ge\n \n9\n \n-and\n \n$_\n \n-le\n \n17\n \n})\n\n\n\n\n\n\nThis creates 24 element arrays with a 1 or a 0 in each entry. Use these to specify when peak\nhours are for the power schedules for the Delivery Groups. Elements 9 to 17 (hours starting 09:00 to 17:00) for weekdays are set to 1, others are left at 0. Two unassigned machines are powered up during peak times, if available.\n\n\n$logId\n \n=\n \nStart-LogHighLevelOperation\n`\n \n-Text\n \nCreate PvD desktop group\n \n`\n\n\n-Source\n \nCreate PvD Desktop Group Script\n\n\n\n\n\n\nStart a new logged operation. This returns a log ID which is passed into subsequent\noperations to associate them with the create group task.\n\n\n$grp\n \n=\n \nNew-BrokerDesktopGroup\n \n`\n\n\n\n-DesktopKind\n \nPrivate\n \n`\n\n\n\n-DeliveryType\n \nDesktopsOnly\n \n`\n\n\n\n-LoggingId\n \n$logId\n.\nId\n \n`\n\n\n\n-Name\n \n$GroupName\n \n`\n\n\n\n-PublishedName\n \n$GroupName\n \n`\n\n\n\n-SessionSupport\n \nSingleSession\n \n`\n\n\n\n-ShutdownDesktopsAfterUse\n \n$False\n\n\n\n$count\n \n=\n \nAdd-BrokerMachinesToDesktopGroup\n \n`\n\n\n\n-Catalog\n \n$SrcCatalog\n \n`\n\n\n\n-Count\n \n$NumDesktops\n \n`\n\n\n\n-DesktopGroup\n \n\\\n$GroupName\n \n`\n\n\n\n-LoggingId\n \n$logId\n.\nId\n\n\n\n$count machines added to the PvD desktop group\n\n\n\n\n\n\nCreate the new Delivery Group, delivering private desktops. The catalog used must have been\npopulated with suitable machines (permanent with a PvD disk). PublishedName is the name seen by end users; the following uses the same name as the group name.\n\n\nNew-BrokerAssignmentPolicyRule\n \n\\`\n\n\n\n-DesktopGroupUid\n \n\\\n$grp\n.\nUid\n \n\\`\n\n\n\n-IncludedUserFilterEnabled\n \n\\\n$False\n \n\\`\n\n\n\n-LoggingId\n \n\\\n$logId\n.\nId\n \n\\`\n\n\n\n-MaxDesktops\n \n1\n \n\\`\n\n\n\n-Name\n \n(\\\n$GroupName\n \n+\n \n\\_AssignRule\n)\n \n\\`\n\n\n\n|\n \nOut-Null\n\n\n\n\n\n\nAssigned desktops need an assignment policy. Disable user filter so that access is controlled\nentirely by access policy rules.\n\n\nNew-BrokerAccessPolicyRule\n \n`\n\n\n\n-AllowedConnections\n \nNotViaAG\n \n`\n\n\n\n-AllowedProtocols\n \n@(\nHDX\n,\nRDP\n)\n \n`\n\n\n\n-AllowRestart\n \n$True\n \n`\n\n\n\n-DesktopGroupUid\n \n$grp\n.\nUid\n \n`\n\n\n\n-IncludedSmartAccessFilterEnabled\n \n$True\n \n`\n\n\n\n-IncludedUserFilterEnabled\n \n$True\n \n`\n\n\n\n-IncludedUsers\n \n$Users\n \n`\n\n\n\n-LoggingId\n \n$logId\n.\nId\n \n`\n\n\n\n-Name\n \n(\n$GroupName\n \n+\n \n_Direct\n)\n \n`\n\n\n\n|\n \nOut-Null\n\n\n\nNew-BrokerAccessPolicyRule\n \n`\n\n\n\n-AllowedConnections\n \nViaAG\n \n`\n\n\n\n-AllowedProtocols\n \n@(\nHDX\n,\nRDP\n)\n \n`\n\n\n\n-AllowRestart\n \n$True\n \n`\n\n\n\n-DesktopGroupUid\n \n$grp\n.\nUid\n \n`\n\n\n\n-IncludedSmartAccessFilterEnabled\n \n$True\n \n`\n\n\n\n-IncludedSmartAccessTags\n \n@()\n \n`\n\n\n\n-IncludedUserFilterEnabled\n \n$True\n \n`\n\n\n\n-IncludedUsers\n \n$Users\n \n`\n\n\n\n-LoggingId\n \n$logId\n.\nId\n \n`\n\n\n\n-Name\n \n(\n$GroupName\n \n+\n \n_AG\n)\n \n`\n\n\n\n|\n \nOut-Null\n\n\n\n\n\n\nSpecify any access restrictions: allow direct access using NetScaler Gateway, using HDX \n\nRDP protocols. The user can request the desktop be restarted, if necessary.\n\n\nNew-BrokerPowerTimeScheme `\n\n\n\n-DaysOfWeek \nWeekdays\n `\n\n\n\n-DesktopGroupUid \n$\ngrp\n.\nUid\n `\n\n\n\n-DisplayName \nWeekdays\n `\n\n\n\n-LoggingId \n$\nlogId\n.\nId\n `\n\n\n\n-Name (\n$\nGroupName\n + \n_Weekdays\n) `\n\n\n\n-PeakHours \n$\npeakHours\n `\n\n\n\n-PoolSize \n$\nweekdayPoolSizeByHour\n `\n\n\n\n| Out-Null\n\n\n\nNew-BrokerPowerTimeScheme `\n\n\n\n-DaysOfWeek \nWeekend\n `\n\n\n\n-DesktopGroupUid \n$\ngrp\n.\nUid\n `\n\n\n\n-DisplayName \nWeekend\n `\n\n\n\n-LoggingId \n$\nlogId\n.\nId\n `\n\n\n\n-Name (\n$\nGroupName\n + \n_Weekend\n) `\n\n\n\n-PeakHours \n$\npeakHours\n `\n\n\n\n-PoolSize \n$\nweekendPoolSizeByHour\n `\n\n\n\n| Out-Null\n\n\n\n\n\n\nOptional: Specify power schedules.\n\n\nStop-LogHighLevelOperation\n \n-HighLevelOperationId\n\n\n$logId\n.\nId\n \n-IsSuccessful\n \n$True\n\n\n\n\n\n\nStop configuration logging and indicate if successful or not.", 
            "title": "Example Create a PvD Desktop"
        }, 
        {
            "location": "/example3/#example-create-a-pvd-desktop", 
            "text": "This document provides an example of a script that creates a Delivery Group containing Personal\nvDisk (PvD) desktops.  Before you begin, make sure you follow the steps detailed in  Get started with the SDK , which shows you how to use Studio to perform the operation you want to script and collect the log of SDK operations that Studio made to perform the task. This output can then be customized to produce a script for automating the task.  Note:  To ensure you always get the latest enhancements and fixes, Citrix recommends you\nfollow the procedure described in this document, rather than copying and pasting the example script.  Understand the script  The following section explains what each part of the script produced by Studio is doing. This will help you with the customization of your own script. Line numbers and line breaks have been added to the script for readability.  1. Start-LogHighLevelOperation -AdminAddress  test-ddc.mydomain.com:80 \n-Source  Studio  -StartTime 31/07/2013 10:08:58 -Text  Create Delivery Group ` Win7 PvD\nDesktops`   Starts a logged operation and returns a log ID which is supplied to subsequent operations to associate them with the wider task.  2. New-BrokerDesktopGroup -AdminAddress  test-ddc.mydomain.com:80  -ColorDepth  TwentyFourBit  -DeliveryType  DesktopsOnly  -DesktopKind  Private  -InMaintenanceMode  $ False  -IsRemotePC  $ False  -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99 -MinimumFunctionalLevel  L7  -Name  Win7 PvD Desktops  -OffPeakBufferSizePercent 10 -PeakBufferSizePercent 10 -PublishedName  Win7 PvD Desktops  -Scope @() -SecureIcaRequired \\ $ False  -SessionSupport  SingleSession -ShutdownDesktopsAfterUse \\ $ False  -TimeZone  GMT Standard Time   Creates a new Delivery Group with options collected by the Studio wizard.  3. Add-BrokerMachinesToDesktopGroup -AdminAddress  test-ddc.mydomain.com:80  -Catalog  win7-pvd  -Count 2 -DesktopGroup  Win7 PvD Desktops  -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99  Adds the number of machines requested from the nominated catalog to the new Delivery Group.  4. Set-Variable -Name  brokerUsers  -Value @( S-1-5-21-3291547628-200264090-930806513-1104 , S-1-5-21-3291547628-200264090-930806513-1105 ) Get-BrokerUser -AdminAddress  test-ddc.mydomain.com:80  -Filter  { (SID -in  $ brokerUsers )} -MaxRecordCount 2147483647 Remove-Variable -Name  brokerUsers  New-BrokerUser -AdminAddress  test-ddc.mydomain.com:80  -Name  MYDOMAIN\\user1  New-BrokerUser -AdminAddress  test-ddc.mydomain.com:80  -Name  MYDOMAIN\\user2   The above commands are not required, Studio is verifying users.  5. Test-BrokerAssignmentPolicyRuleNameAvailable -AdminAddress  test-ddc.mydomain.com:80  -Name @( Win7 PvD Desktops )  Studio checks that the policy assignment name is available to use.  6. New-BrokerAssignmentPolicyRule -AdminAddress  test-ddc.mydomain.com:80  -DesktopGroupUid 41 -Enabled  $ True  -IncludedUserFilterEnabled  $ False  -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99 -MaxDesktops 1 -Name  Win7 PvD Desktops   Create the new policy assignment rule for the Delivery Group. No users are specified here so\nall control is through the access policy rule.  7. Set-Variable -Name  brokerUsers  -Value @( S-1-5-21-3291547628-200264090-930806513-1104 , S-1-5-21-3291547628-200264090-930806513-1105 )   Get-BrokerUser -AdminAddress  test-ddc.mydomain.com:80  -Filter  { (SID -in \\ $ brokerUsers )} -MaxRecordCount 2147483647  Remove-Variable -Name  brokerUsers  New-BrokerUser -AdminAddress  test-ddc.mydomain.com:80  -Name  MYDOMAIN\\\\user1  New-BrokerUser -AdminAddress  test-ddc.mydomain.com:80  -Name  MYDOMAIN\\\\user2   The above commands are not required, Studio is performing further checks.  8. Test-BrokerAccessPolicyRuleNameAvailable -AdminAddress  test-ddc.mydomain.com:80  -Name @( Win7 PvD Desktops\\_Direct )  Studio tests that the access policy rule name is available to use.  9. New-BrokerAccessPolicyRule -AdminAddress  test-ddc.mydomain.com:80  -AllowedConnections  NotViaAG  -AllowedProtocols @( HDX , RDP ) -AllowRestart  $ True  -DesktopGroupUid  41 -Enabled \\ $ True  -IncludedSmartAccessFilterEnabled  $ True  -IncludedUserFilterEnabled  $ True  -IncludedUsers @( MYDOMAIN\\user1 , MYDOMAIN\\user2 ) -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99 -Name  Win7 PvD Desktops_Direct   Creates the access policy rule for the new desktop for non-NetScaler Gateway connections.  10. Test-BrokerAccessPolicyRuleNameAvailable -AdminAddress  test-ddc.mydomain.com:80  -Name @( Win7 PvD Desktops_AG ) New-BrokerAccessPolicyRule -AdminAddress  test-ddc.mydomain.com:80  -AllowedConnections  ViaAG  -AllowedProtocols @( HDX , RDP ) -AllowRestart  $ True  -DesktopGroupUid 41 -Enabled  $ True  -IncludedSmartAccessFilterEnabled  $ True  -IncludedSmartAccessTags @() -IncludedUserFilterEnabled  $ True  -IncludedUsers  @( MYDOMAIN\\user1 , MYDOMAIN\\user2 ) -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99 -Name  Win7 PvDDesktops_AG   Studio repeats this process for NetScaler Gateway connections.  11. Test-BrokerPowerTimeSchemeNameAvailable -AdminAddress  test-ddc.mydomain.com:80  -Name @( Win7 PvD Desktops_Weekdays ) New-BrokerPowerTimeScheme -AdminAddress  test-ddc.mydomain.com:80  -DaysOfWeek  Weekdays  -DesktopGroupUid 41 -DisplayName  Weekdays  -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99 -Name  Win7 PvD Desktops_Weekdays  -PeakHours @( $ False , $ False , $ False , $ False , $ False , $ False , $ False , $ True , $ True , $ True , $ True , $ True , $ True , $ True , $ True ,  $ True , $ True , $ True , $ True , $ False , $ False , $ False , $ False , $ False ) -PoolSize @(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) Test-BrokerPowerTimeSchemeNameAvailable -AdminAddress  test-ddc.mydomain.com:80  -Name @( Win7 PvD Desktops_Weekend ) New-BrokerPowerTimeScheme -AdminAddress  test-ddc.mydomain.com:80  -DaysOfWeek  Weekend  -DesktopGroupUid 41 -DisplayName  Weekend  -LoggingId 846f2d42-a994-4bce-ab58-be05c8d73b99 -Name  Win7 PvD Desktops_Weekend  -PeakHours @( $ False , $ False , $ False , $ False , $ False , $ False , $ False , $ True , $ True , $ True , $ True , $ True , $ True , $ True , $ True , $ True , $ True , $ True , $ True , $ False , $ False , $ False , $ False , $ False ) -PoolSize @(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)   Studio checks that the names for the (optional) weekday and weekend power schemes are\navailable, and adds these.  12. Stop-LogHighLevelOperation -AdminAddress  test-ddc.mydomain.com:80  -EndTime 31/07/2013 10:09:05 -HighLevelOperationId  846f2d42-a994-4bce-ab58-be05c8d73b99  -IsSuccessful  $ True   Stops the logged operation begun in step 1 and indicates it was successful.  Customize the script  This section shows how to convert and adapt the Studio output into a script that is more consumable.  The script creates a Delivery Group containing PvD desktops. The catalog specified in the parameters must exist already and be populated appropriately (with an allocation type of static and a PvD disk). The script is designed to be run from a Powershell command line logged on as a Citrix administrator. No checks are made for permissions; the script will fail if the user does not have the appropriate permissions.  lt;\\ #  Sample usage:  .\\CreatePvDGroup.ps1 `  -GroupName  Win7 PvD Desktops  `  -SrcCatalog  win7-pvd  `  -NumDesktops 2 `  -Users @( mydomain\\user1 , mydomain\\user2 ) `  \\ # gt;  Param(  [Parameter(Mandatory=\\ $ true )\\] \\[string\\] \\ $ GroupName ,  \\[Parameter(Mandatory=\\ $ true )\\] \\[string\\] \\ $ SrcCatalog ,  \\[Parameter(Mandatory=\\ $ true )\\] \\[int\\] \\ $ NumDesktops ,  \\[Parameter(Mandatory=\\ $ true )\\] \\[array\\] \\ $ Users  \\[string\\] \\ $ AdminAddress  )   The table explains the parameters used in the script.     Parameter  Description      SrcCatalog  The name of the catalog to be used to create the PvD desktop. Create the catalog by specifying an allocation type of static. Machines must also have PvD disks.    GroupName  The name of the catalog to be used to create the PvD desktop. Create the catalog by specifying an allocation type of static. Machines must also have PvD disks.    NumDesktops  The number of machines to add to the PvD desktop group. If insufficient machines are available, as many as possible are added.    Users  Which users can access the group. This is a list of users or groups; for example, @('mydomain\\Domain Users') or @('mydomain\\user1','mydomain\\user2')     Set-HypAdminConnection   -AdminAddress   $adminAddress   Specify the hypervisor admin connection to use. Removes the need for the -AdminAddress for some\nof the commands.  $peakPoolSize   =   2  $weekendPoolSizeByHour   =   new-object   int []   24  $weekdayPoolSizeByHour   =   new-object   int []   24  9 .. 17   |   %{   $weekdayPoolSizeByHour [ $_ ]   =   $peakPoolSize   }  $peakHours   =   ( 0 .. 23   |   %{   $_   -ge   9   -and   $_   -le   17   })   This creates 24 element arrays with a 1 or a 0 in each entry. Use these to specify when peak\nhours are for the power schedules for the Delivery Groups. Elements 9 to 17 (hours starting 09:00 to 17:00) for weekdays are set to 1, others are left at 0. Two unassigned machines are powered up during peak times, if available.  $logId   =   Start-LogHighLevelOperation `   -Text   Create PvD desktop group   `  -Source   Create PvD Desktop Group Script   Start a new logged operation. This returns a log ID which is passed into subsequent\noperations to associate them with the create group task.  $grp   =   New-BrokerDesktopGroup   `  -DesktopKind   Private   `  -DeliveryType   DesktopsOnly   `  -LoggingId   $logId . Id   `  -Name   $GroupName   `  -PublishedName   $GroupName   `  -SessionSupport   SingleSession   `  -ShutdownDesktopsAfterUse   $False  $count   =   Add-BrokerMachinesToDesktopGroup   `  -Catalog   $SrcCatalog   `  -Count   $NumDesktops   `  -DesktopGroup   \\ $GroupName   `  -LoggingId   $logId . Id  $count machines added to the PvD desktop group   Create the new Delivery Group, delivering private desktops. The catalog used must have been\npopulated with suitable machines (permanent with a PvD disk). PublishedName is the name seen by end users; the following uses the same name as the group name.  New-BrokerAssignmentPolicyRule   \\`  -DesktopGroupUid   \\ $grp . Uid   \\`  -IncludedUserFilterEnabled   \\ $False   \\`  -LoggingId   \\ $logId . Id   \\`  -MaxDesktops   1   \\`  -Name   (\\ $GroupName   +   \\_AssignRule )   \\`  |   Out-Null   Assigned desktops need an assignment policy. Disable user filter so that access is controlled\nentirely by access policy rules.  New-BrokerAccessPolicyRule   `  -AllowedConnections   NotViaAG   `  -AllowedProtocols   @( HDX , RDP )   `  -AllowRestart   $True   `  -DesktopGroupUid   $grp . Uid   `  -IncludedSmartAccessFilterEnabled   $True   `  -IncludedUserFilterEnabled   $True   `  -IncludedUsers   $Users   `  -LoggingId   $logId . Id   `  -Name   ( $GroupName   +   _Direct )   `  |   Out-Null  New-BrokerAccessPolicyRule   `  -AllowedConnections   ViaAG   `  -AllowedProtocols   @( HDX , RDP )   `  -AllowRestart   $True   `  -DesktopGroupUid   $grp . Uid   `  -IncludedSmartAccessFilterEnabled   $True   `  -IncludedSmartAccessTags   @()   `  -IncludedUserFilterEnabled   $True   `  -IncludedUsers   $Users   `  -LoggingId   $logId . Id   `  -Name   ( $GroupName   +   _AG )   `  |   Out-Null   Specify any access restrictions: allow direct access using NetScaler Gateway, using HDX  \nRDP protocols. The user can request the desktop be restarted, if necessary.  New-BrokerPowerTimeScheme `  -DaysOfWeek  Weekdays  `  -DesktopGroupUid  $ grp . Uid  `  -DisplayName  Weekdays  `  -LoggingId  $ logId . Id  `  -Name ( $ GroupName  +  _Weekdays ) `  -PeakHours  $ peakHours  `  -PoolSize  $ weekdayPoolSizeByHour  `  | Out-Null  New-BrokerPowerTimeScheme `  -DaysOfWeek  Weekend  `  -DesktopGroupUid  $ grp . Uid  `  -DisplayName  Weekend  `  -LoggingId  $ logId . Id  `  -Name ( $ GroupName  +  _Weekend ) `  -PeakHours  $ peakHours  `  -PoolSize  $ weekendPoolSizeByHour  `  | Out-Null   Optional: Specify power schedules.  Stop-LogHighLevelOperation   -HighLevelOperationId  $logId . Id   -IsSuccessful   $True   Stop configuration logging and indicate if successful or not.", 
            "title": "Example: Create a PvD Desktop"
        }, 
        {
            "location": "/example4/", 
            "text": "Example: Get load balancing information\n\n\nYou can use Server OS Machines to deliver cost-effective applications and desktops hosted on\nserver operating systems to multiple users.\n\n\nTo load balance Server OS Machines in a deployment, you use Citrix policies. There are several\nload balancing policy settings for enabling and configuring load management between servers delivering Windows Server OS machines. For more information, see the load management policy settings reference documentation. You work with policies through Studio or the Group Policy Management Console in Windows; see the Policies documentation for details.\n\n\nTo see the load, you can use either the Citrix Director or Studio consoles, or the PowerShell\nSDK. The following example shows how to use the PowerShell SDK to display the load.\n\n\nNote:\n If you've used previous versions of XenDesktop, you may be familiar with the \nqfarm\n/load\n command. This tool is no longer available, but you can use PowerShell to display similar output as shown in the example below.\n\n\nExample: Get load index values\n\n\nTo display a list of machines with their calculated/measured load index values, together with\ncounts of sessions running on them:\n\n\n\n\n\n\nStart a shell in PowerShell. For more information, see: \nXenApp and XenDesktop SDK\n.\n\n\n\n\n\n\nType:\n\n\n\n\n\n\nGet-BrokerMachine\n \n-SessionSupport\n \nMultiSession\n \n-Property\n \nDnsName\n,\nLoadIndex\n,\nSessionCount\n\n\n\n\n\n\nNote:\n Load index values go up to 10000. They indicate VDA machine load calculated from the configured sources, such as number of sessions. A value of 10000 indicates a fully loaded VDA machine; the broker will not send another user session to that machine.\n\n\nFor more information and examples, see the cmdlet help for the get-brokermachine cmdlet and About topics such as about_broker_filtering-xd7.html. See: \nPowerShell cmdlet help\n.", 
            "title": "Example Get load balancing information"
        }, 
        {
            "location": "/example4/#example-get-load-balancing-information", 
            "text": "You can use Server OS Machines to deliver cost-effective applications and desktops hosted on\nserver operating systems to multiple users.  To load balance Server OS Machines in a deployment, you use Citrix policies. There are several\nload balancing policy settings for enabling and configuring load management between servers delivering Windows Server OS machines. For more information, see the load management policy settings reference documentation. You work with policies through Studio or the Group Policy Management Console in Windows; see the Policies documentation for details.  To see the load, you can use either the Citrix Director or Studio consoles, or the PowerShell\nSDK. The following example shows how to use the PowerShell SDK to display the load.  Note:  If you've used previous versions of XenDesktop, you may be familiar with the  qfarm\n/load  command. This tool is no longer available, but you can use PowerShell to display similar output as shown in the example below.  Example: Get load index values  To display a list of machines with their calculated/measured load index values, together with\ncounts of sessions running on them:    Start a shell in PowerShell. For more information, see:  XenApp and XenDesktop SDK .    Type:    Get-BrokerMachine   -SessionSupport   MultiSession   -Property   DnsName , LoadIndex , SessionCount   Note:  Load index values go up to 10000. They indicate VDA machine load calculated from the configured sources, such as number of sessions. A value of 10000 indicates a fully loaded VDA machine; the broker will not send another user session to that machine.  For more information and examples, see the cmdlet help for the get-brokermachine cmdlet and About topics such as about_broker_filtering-xd7.html. See:  PowerShell cmdlet help .", 
            "title": "Example: Get load balancing information"
        }
    ]
}